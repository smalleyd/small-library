package com.small.library.atg.gen;

import java.io.*;
import java.sql.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.w3c.dom.*;
import org.xml.sax.InputSource;
import org.apache.xerces.parsers.DOMParser;

import com.small.library.atg.meta.*;
import com.small.library.generator.*;
import com.small.library.xml.XMLHelper;

/***************************************************************************************
*
*	Generator class for Dynamo SQL Repository Item value object handlers. Value object
*	handlers are classes that can create and synch entity value objects to their specific
*	<I>RepositoryItem</I>.
*
*	<BR><BR>
*
*	The value object handlers are generated by inspecting already created Repository Item
*	Descriptions, as opposed to using database meta data.
*
*	@author David Small
*	@version 1.0.0.0
*	@date 7/21/2002
*
***************************************************************************************/

public class SQLRepositoryItemValueHandler extends SQLRepositoryItemBase
{
	/******************************************************************************
	*
	*	Constants
	*
	*****************************************************************************/

	/******************************************************************************
	*
	*	Static members
	*
	*****************************************************************************/

	/******************************************************************************
	*
	*	Constructors
	*
	*****************************************************************************/

	/** Constructor - constructs an empty object. */
	public SQLRepositoryItemValueHandler() { super(); }

	/** Constructor - constructs a populated object.
		@param pWriter The output stream.
		@param strAuthor Name of the author.
		@param pDocuemnt XML DOM document that contains the parsed
			Repository Item Descriptor.
	*/
	public SQLRepositoryItemValueHandler(PrintWriter pWriter,
		String strAuthor, Document pDocument)
			throws DynamoMetaException
	{
		super(pWriter, strAuthor, pDocument);
	}

	/** Constructor - constructs a populated object.
		@param pWriter The output stream.
		@param strAuthor Name of the author.
		@param pDocuemnt XML DOM document that contains the parsed
			Repository Item Descriptor.
		@param strPackageName Package name of the wrapper class.
	*/
	public SQLRepositoryItemValueHandler(PrintWriter pWriter,
		String strAuthor, Document pDocument, String strPackageName)
			throws DynamoMetaException
	{
		super(pWriter, strAuthor, pDocument, strPackageName);
	}

	/******************************************************************************
	*
	*	Required methods: Base
	*
	*****************************************************************************/

	/** Action method - generates the SQL Repository Item Descriptor. */
	public void generate() throws GeneratorException, IOException
	{
		populatePropertyInfo();

		writeHeader();
		writeClassDeclaration();
		writeConstructors();

		writeCreators();
		writeSynchers();

		writeFooter();
	}

	/******************************************************************************
	*
	*	Helper methods
	*
	*****************************************************************************/

	/** Helper method - populates commonly used item descriptor property
	    information into member variables.
	*/
	private void populatePropertyInfo()
		throws GeneratorException
	{
		Collection properties = getDefaultItemDescriptor().getProperties();
		Iterator itProperties = properties.iterator();

		m_nProperties = properties.size();

		m_propObjectNames = new String[m_nProperties];
		m_propJavaTypes = new String[m_nProperties];
		m_propIsPrimitives = new boolean[m_nProperties];
		m_propMemberVariables = new String[m_nProperties];
		m_propMethodSuffixes = new String[m_nProperties];

		int i = 0;

		while (itProperties.hasNext())
		{
			Property property = (Property) itProperties.next();

			m_propObjectNames[i] = property.getName();
			m_propJavaTypes[i] = getJavaType(property);
			m_propIsPrimitives[i] = isPrimitive(m_propJavaTypes[i]);
			m_propMemberVariables[i] = m_propObjectNames[i];
			m_propMethodSuffixes[i] = getPropertyMethodSuffix(property);

			i++;
		}
	}

	/******************************************************************************
	*
	*	Output methods
	*
	*****************************************************************************/

	/** Output method - writes the file header. */
	private void writeHeader() throws IOException
	{
		String strPackageName = getPackageName();

		if (null != strPackageName)
		{
			writeLine("package " + strPackageName + ";");
			writeLine();
		}

		// Must include "java.util.*" becuase of Date, Set, List, and Map.

		writeLine("import java.sql.Timestamp;");
		writeLine("import java.util.*;");
		writeLine();
		writeLine("import atg.repository.*;");
		writeLine();
		writeLine("import " + getFrameworkPackage() + ".*;");
		writeLine();
		writeLine("/**********************************************************************************");
		writeLine("*");
		writeLine("*\tValue object handler that represents the " + getName() + " repository item. Acts ");
		writeLine("*\tas an extractor/setter for value objects that represent the " + getName());
		writeLine("*\tentity.");
		writeLine("*");
		writeLine("*\t@author " + getAuthor());
		writeLine("*\t@version 1.0.0.0");
		writeLine("*\t@date " + getDateString());
		writeLine("*");
		writeLine("**********************************************************************************/");
	}

	/** Output method - writes the class declaration. */
	private void writeClassDeclaration() throws IOException
	{
		writeLine();
		writeLine("public class " + getClassName() + " extends MutableRepositoryHandler");
		writeLine("{");
	}

	/** Output method - writes the constructors. */
	private void writeConstructors() throws IOException
	{
		String strName = getName();
		String strClassName = getClassName();

		writeLine("\t/**************************************************************************");
		writeLine("\t*");
		writeLine("\t*\tConstructors");
		writeLine("\t*");
		writeLine("\t**************************************************************************/");
		writeLine();
		writeLine("\t/** Constructor - constructs an empty object. */");
		writeLine("\tpublic " + strClassName + "() {}");
	}

	/** Output method - writes the creator methods. */
	private void writeCreators() throws IOException
	{
		String strName = getName();
		String strValueObjectClassName = SQLRepositoryItemValueObject.getClassName(strName);

		writeLine();
		writeLine("\t/**************************************************************************");
		writeLine("\t*");
		writeLine("\t*\tCreator methods");
		writeLine("\t*");
		writeLine("\t**************************************************************************/");

		// Write single object creator.
		writeLine();
		writeLine("\t/** Creator method - creates a \"" + strName + "\" value object from a");
		writeLine("\t    Repository Item that represents the \"" + strName + "\" entity.");
		writeLine("\t\t@param repositoryItem Repository Item used as the basis for the created");
		writeLine("\t\t\tvalue object.");
		writeLine("\t*/");
		writeLine("\tpublic " + strValueObjectClassName + " create(RepositoryItem repositoryItem)");
		writeLine("\t\tthrows RepositoryPropertyConversionException");
		writeLine("\t{");
		writeLine("\t\t" + strValueObjectClassName + " valueObject = new " +
			strValueObjectClassName + "();");
		writeLine();

		for (int i = 0; i < m_nProperties; i++)
			writeLine("\t\tvalueObject." + m_propMemberVariables[i] +
				" = getProperty" + m_propMethodSuffixes[i] +
				"(repositoryItem, \"" + m_propObjectNames[i] +
				"\");");

		writeLine();
		writeLine("\t\treturn valueObject;");
		writeLine("\t}");

		// Write array object creator.
		writeLine();
		writeLine("\t/** Creator method - creates \"" + strName + "\" value objects from an");
		writeLine("\t    array of Repository Items that represent the \"" + strName + "\" entity.");
		writeLine("\t\t@param repositoryItems Array of Repository Items used as the basis for the");
		writeLine("\t\t\tcreated value objects.");
		writeLine("\t*/");
		writeLine("\tpublic " + strValueObjectClassName + "[] create(RepositoryItem[] repositoryItems)");
		writeLine("\t\tthrows RepositoryPropertyConversionException");
		writeLine("\t{");
		writeLine("\t\t" + strValueObjectClassName + "[] valueObjects = new " +
			strValueObjectClassName + "[repositoryItems.length];");
		writeLine();
		writeLine("\t\tfor (int i = 0; i < repositoryItems.length; i++)");
		writeLine("\t\t\tvalueObjects[i] = create(repositoryItems[i]);");

		writeLine();
		writeLine("\t\treturn valueObjects;");
		writeLine("\t}");
	}

	/** Output method - writes the syncher methods. */
	private void writeSynchers() throws IOException
	{
		String strName = getName();
		String strValueObjectClassName = SQLRepositoryItemValueObject.getClassName(strName);

		writeLine();
		writeLine("\t/**************************************************************************");
		writeLine("\t*");
		writeLine("\t*\tSyncher methods");
		writeLine("\t*");
		writeLine("\t**************************************************************************/");

		// Write single object syncher.
		writeLine();
		writeLine("\t/** Syncher method - synches a \"" + strName + "\" value object with a");
		writeLine("\t    Mutable Repository Item that represents the \"" + strName + "\" entity.");
		writeLine("\t\t@param repositoryItem Mutable Repository Item synched with the value object.");
		writeLine("\t\t@param valueObject Value object of type \"" + strName + "\".");
		writeLine("\t*/");
		writeLine("\tpublic void synch(MutableRepositoryItem repositoryItem, "
			+ strValueObjectClassName + " valueObject)");
		writeLine("\t{");

		for (int i = 0; i < m_nProperties; i++)
			writeLine("\t\tsetPropertyValue(repositoryItem, \"" +
				m_propObjectNames[i] + "\", valueObject." +
				m_propMemberVariables[i] + ");");

		writeLine("\t}");

		// Write array object syncher.
		writeLine();
		writeLine("\t/** Syncher method - synches \"" + strName + "\" value objects with an");
		writeLine("\t    array of Mutable Repository Items that represent the \"" + strName + "\" entity.");
		writeLine("\t\t@param repositoryItems Array of Mutable Repository Items synched with the value objects.");
		writeLine("\t\t@param valueObjects Array of value objects of type \"" + strName + "\".");
		writeLine("\t*/");
		writeLine("\tpublic void synch(MutableRepositoryItem[] repositoryItems, "
			+ strValueObjectClassName + "[] valueObjects)");
		writeLine("\t{");
		writeLine("\t\tfor (int i = 0; i < repositoryItems.length; i++)");
		writeLine("\t\t\tsynch(repositoryItems[i], valueObjects[i]);");

		writeLine("\t}");
	}

	/** Output method - write the class footer. */
	private void writeFooter() throws IOException
	{
		writeLine("}");
	}

	/******************************************************************************
	*
	*	Accessor methods
	*
	*****************************************************************************/

	/** Accessor method - gets the object name of the wrapper class.
	*/
	public String getClassName() { return m_strClassName; }

	/******************************************************************************
	*
	*	Mutator methods
	*
	*****************************************************************************/

	/** Mutator method - sets the XML DOM document that contains the parsed
	    Repository Item Descriptor.
	*/
	public void setDocument(Document document)
		throws DynamoMetaException, NullPointerException
	{
		super.setDocument(document);

		m_strClassName = getName() + "ValueHandler";
	}

	/******************************************************************************
	*
	*	Member variables
	*
	*****************************************************************************/

	/** Member variable - reference to the object name of the wrapper class. */
	private String m_strClassName = null;

	/** Member variable - contains the number of properties in the current
	    item descriptor.
	*/
	private int m_nProperties = 0;

	/** Member variable - array of object names for each property. */
	private String[] m_propObjectNames = null;

	/** Member variable - array of java types for each property. */
	private String[] m_propJavaTypes = null;

	/** Member variable - array of primitive indicators for each property. */
	private boolean[] m_propIsPrimitives = null;

	/** Member variable - array of member variable names for each property. */
	private String[] m_propMemberVariables = null;

	/** Member variable - array of method suffixes for the repository handler
	    property accessors and mutators.
	*/
	private String[] m_propMethodSuffixes = null;

	/******************************************************************************
	*
	*	Class entry point
	*
	*****************************************************************************/

	/** Command line entry point.
		@param strArg1 Output directory.
		@param strArg2 Input directory of the Repository Item Descriptors.
		@param strArg3 author of the generated classes. Will use the
			"user.name" system property value if not supplied.
		@param strArg4 package name of the wrapper class.
	*/
	public static void main(String strArgs[])
	{
		try
		{
			// Have enough arguments been supplied?
			if (2 > strArgs.length)
				throw new IllegalArgumentException("Please supply at least 2 arguments.");

			// Local variables
			File fileOutputDir = extractOutputDirectory(strArgs, 0);
			File fileInputDir = extractDirectory(strArgs, 1, "input");
			String strAuthor = extractAuthor(strArgs, 2);
			String strPackageName = extractArgument(strArgs, 3, null);

			// Get the list of files.
			FileFilter fileFilter = new com.small.library.util.FileFilterByExtension("xml");
			File[] fileItemDescriptors =
				fileInputDir.listFiles(fileFilter);

			// Create the SQL Repository Item Descriptor generator.
			SQLRepositoryItemValueHandler generator =
				new SQLRepositoryItemValueHandler((PrintWriter) null, strAuthor,
				null, strPackageName);

			// Generate repository resource.
			generateRepositoryResource(generator, fileItemDescriptors, fileOutputDir);
		}

		catch (IllegalArgumentException pEx)
		{
			String strMessage = pEx.getMessage();

			if (null != strMessage)
			{
				System.out.println(strMessage);
				System.out.println();
			}

			System.out.println("Usage: java " + SQLRepositoryItemValueHandler.class.getName() + " Output directory");
			System.out.println("\tInput directory of the Repository Item Descriptors");
			System.out.println("\t[Author]");
			System.out.println("\t[Package Name]");
		}

		catch (Exception pEx)
		{
			pEx.printStackTrace();
		}
	}
}
