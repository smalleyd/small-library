package com.small.library.atg.gen;

import java.io.*;
import java.sql.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.w3c.dom.*;
import org.xml.sax.InputSource;
import org.apache.xerces.parsers.DOMParser;

import com.small.library.atg.meta.*;
import com.small.library.generator.*;
import com.small.library.xml.XMLHelper;

/***************************************************************************************
*
*	Generator class for Dynamo SQL Repository Item Data Beans. Item Data
*	Beans are simple Java classes that represent a <I>RepositoryItem</I> and
*	expose accessors and mutators of an entity for each property that closely
*	matches a property's type. This overcomes the overly simple <CODE>
*	getPropertyValue</CODE> and <CODE>setPropertyValue</CODE> methods of
*	<I>RepositoryItem</I> (<I>MutableRepositoryItem</I>) that do not enforce
*	strict type safety during compile.
*
*	<BR><BR>
*
*	The data beans are generated by inspecting already created Repository Item
*	Descriptions, as opposed to using database meta data.
*
*	@author David Small
*	@version 1.0.0.0
*	@date 7/17/2002
*
***************************************************************************************/

public class SQLRepositoryItemDataBean extends SQLRepositoryItemBase
{
	/******************************************************************************
	*
	*	Constants
	*
	*****************************************************************************/

	/******************************************************************************
	*
	*	Static members
	*
	*****************************************************************************/

	/** Helper method - helps build the class name of the data bean based
	    on the name of the repository item.
		@param repositoryItemName Name of the repository item.
	*/
	public static String getClassName(String repositoryItemName)
	{
		return repositoryItemName + "DataBean";
	}

	/******************************************************************************
	*
	*	Constructors
	*
	*****************************************************************************/

	/** Constructor - constructs an empty object. */
	public SQLRepositoryItemDataBean() { super(); }

	/** Constructor - constructs a populated object.
		@param pWriter The output stream.
		@param strAuthor Name of the author.
		@param pDocuemnt XML DOM document that contains the parsed
			Repository Item Descriptor.
	*/
	public SQLRepositoryItemDataBean(PrintWriter pWriter,
		String strAuthor, Document pDocument)
			throws DynamoMetaException
	{
		super(pWriter, strAuthor, pDocument);
	}

	/** Constructor - constructs a populated object.
		@param pWriter The output stream.
		@param strAuthor Name of the author.
		@param pTable A table record object to base the output on.
		@param pDocuemnt XML DOM document that contains the parsed
			Repository Item Descriptor.
	*/
	public SQLRepositoryItemDataBean(PrintWriter pWriter,
		String strAuthor, Document pDocument, String strPackageName)
			throws DynamoMetaException
	{
		super(pWriter, strAuthor, pDocument, strPackageName);
	}

	/******************************************************************************
	*
	*	Required methods: Base
	*
	*****************************************************************************/

	/** Action method - generates the SQL Repository Item Descriptor. */
	public void generate() throws GeneratorException, IOException
	{
		// pre populates commonly used item descriptor property information.
		populatePropertyInfo();

		// Output the wrapper class.
		writeHeader();
		writeClassDeclaration();
		writeLoadBean();
		writeStoreBean();

		writeAccessors();
		writeMutators();
		writeCheckModified();
		writeToStringMethod();
		writeHashCodeMethod();
		writeEqualsMethod();
		writeCloneMethod();
		writeMemberVariables();

		writeFooter();
	}

	/******************************************************************************
	*
	*	Helper methods
	*
	*****************************************************************************/

	/** Helper method - populates commonly used item descriptor property
	    information into member variables.
	*/
	private void populatePropertyInfo()
		throws GeneratorException
	{
		Collection properties = getDefaultItemDescriptor().getProperties();
		Iterator itProperties = properties.iterator();

		m_nProperties = properties.size();

		m_propObjectNames = new String[m_nProperties];
		m_propMethodSuffixes = new String[m_nProperties];
		m_propJavaTypes = new String[m_nProperties];
		m_propIsPrimitives = new boolean[m_nProperties];
		m_propMemberVariables = new String[m_nProperties];

		int i = 0;

		while (itProperties.hasNext())
		{
			Property property = (Property) itProperties.next();

			m_propObjectNames[i] = property.getName();
			m_propMethodSuffixes[i] = getPropertyMethodSuffix(property);
			m_propJavaTypes[i] = getJavaType(property);
			m_propIsPrimitives[i] = isPrimitive(m_propJavaTypes[i]);
			m_propMemberVariables[i] = "m_" + getVariablePrefix(property) +
				m_propObjectNames[i];

			i++;
		}
	}

	/******************************************************************************
	*
	*	Output methods
	*
	*****************************************************************************/

	/** Output method - writes the file header. */
	private void writeHeader() throws IOException
	{
		String strPackageName = getPackageName();

		if (null != strPackageName)
		{
			writeLine("package " + strPackageName + ";");
			writeLine();
		}

		// Must include "java.util.*" becuase of Date, Set, List, and Map.

		writeLine("import java.sql.Timestamp;");
		writeLine("import java.util.*;");
		writeLine();
		writeLine("import atg.repository.*;");
		writeLine();
		writeLine("import com.tgt.supply.pdd.atg.util.DataBeanRepositoryPersistance;");
		writeLine("import com.tgt.supply.pdd.atg.util.DataBeanRepositoryPersistanceException;");
		writeLine("import com.tgt.supply.pdd.atg.util.RepositoryPersister;");
		writeLine("import com.tgt.supply.pdd.util.DataBeanIdentityImpl;");
		writeLine();
		writeLine("/**********************************************************************************");
		writeLine("*");
		writeLine("*\tBean class that represents the " + getName() + " repository item. Extracts ");
		writeLine("*\tvalues from the repository item during <CODE>loadBean</CODE> and resets");
		writeLine("*\tthe repository item values during a request to <CODE>storeBean</CODE>.");
		writeLine("*");
		writeLine("*\t@author " + getAuthor());
		writeLine("*\t@version 1.0.0.0");
		writeLine("*\t@date " + getDateString());
		writeLine("*");
		writeLine("**********************************************************************************/");
	}

	/** Output method - writes the class declaration. */
	private void writeClassDeclaration() throws IOException
	{
		writeLine();
		writeLine("public class " + getClassName());
		writeLine("\textends DataBeanIdentityImpl");
		writeLine("\timplements DataBeanRepositoryPersistance");
		writeLine("{");
	}

	/** Output method - writes the <CODE>loadBean</CODE> method. */
	private void writeLoadBean() throws IOException
	{
		String strName = getName();

		writeLine("\t/**************************************************************************");
		writeLine("\t*");
		writeLine("\t*\tLoad method");
		writeLine("\t*");
		writeLine("\t**************************************************************************/");
		writeLine();
		writeLine("\t/** Load method - extract property values from the repository item to");
		writeLine("\t    populate this instance of the data bean.");
		writeLine("\t\t@param repositoryItem A Repository Item object that contains");
		writeLine("\t\t\t" + strName + " record values.");
		writeLine("\t*/");
		writeLine("\tpublic void loadBean(RepositoryItem repositoryItem)");
		writeLine("\t\tthrows DataBeanRepositoryPersistanceException");
		writeLine("\t{");
		writeLine("\t\tsetKey(RepositoryPersister.getItemKey(repositoryItem));");
		writeLine();

		for (int i = 0; i < m_nProperties; i++)
		{
			writeLine("\t\t" + m_propMemberVariables[i] + " = " +
				"RepositoryPersister.getProperty" + m_propMethodSuffixes[i] +
				"(repositoryItem, \"" + m_propObjectNames[i] + "\");");
		}

		writeLine("\t}");
	}

	/** Output method - writes the <CODE>storeBean</CODE> method. */
	private void writeStoreBean() throws IOException
	{
		String strName = getName();

		writeLine();
		writeLine("\t/**************************************************************************");
		writeLine("\t*");
		writeLine("\t*\tStore method");
		writeLine("\t*");
		writeLine("\t**************************************************************************/");
		writeLine();
		writeLine("\t/** Store method - resets property values of the repository item from");
		writeLine("\t    the members of this instance of the data bean.");
		writeLine("\t\t@param repositoryItem A Repository Item object that contains");
		writeLine("\t\t\t" + strName + " record values.");
		writeLine("\t*/");
		writeLine("\tpublic void storeBean(MutableRepositoryItem repositoryItem)");
		writeLine("\t\tthrows DataBeanRepositoryPersistanceException");
		writeLine("\t{");

		for (int i = 0; i < m_nProperties; i++)
		{
			writeLine("\t\tRepositoryPersister.setPropertyValue(" +
				"repositoryItem, \"" + m_propObjectNames[i] + "\", " +
				m_propMemberVariables[i] + ");");
		}

		writeLine("\t}");
	}

	/** Output method - writes the bean accessors. */
	private void writeAccessors() throws IOException
	{
		writeLine();
		writeLine("\t/**************************************************************************");
		writeLine("\t*");
		writeLine("\t*\tAccessor methods");
		writeLine("\t*");
		writeLine("\t**************************************************************************/");

		for (int i = 0; i < m_nProperties; i++)
		{
			writeLine();
			writeLine("\t/** Accessor method - gets the \"" + m_propObjectNames[i] + "\" property value. */");
			writeLine("\tpublic " + m_propJavaTypes[i] + " get" + m_propObjectNames[i] +
				"() { return " + m_propMemberVariables[i] + "; }");
		}
	}

	/** Output method - writes the bean mutators. */
	private void writeMutators() throws IOException
	{
		writeLine();
		writeLine("\t/**************************************************************************");
		writeLine("\t*");
		writeLine("\t*\tMutator methods");
		writeLine("\t*");
		writeLine("\t**************************************************************************/");

		for (int i = 0; i < m_nProperties; i++)
		{
			writeLine();
			writeLine("\t/** Mutator method - sets the \"" + m_propObjectNames[i] + "\" property value. */");
			writeLine("\tpublic void set" + m_propObjectNames[i] + "(" +
				m_propJavaTypes[i] + " newValue)");
			writeLine("\t{");

			if (m_propIsPrimitives[i])
				writeLine("\t\tif (newValue == " + m_propMemberVariables[i] +
					")");
			else
			{
				writeLine("\t\tif (((newValue == null) && (" + m_propMemberVariables[i] +
					" == null))");
				writeLine("\t\t   || ((newValue != null) && newValue.equals(" + m_propMemberVariables[i] +
					")))");
			}

			writeLine("\t\t\treturn;");
			writeLine();
			writeLine("\t\tsetModified();");
			writeLine("\t\t" + m_propMemberVariables[i] +
				" = newValue;");
			writeLine("\t}");
		}
	}

	/** Output method - writes the <CODE>checkModified</CODE> method. */
	private void writeCheckModified() throws IOException
	{
		String strClassName = getClassName();

		writeLine();
		writeLine("\t/**************************************************************************");
		writeLine("\t*");
		writeLine("\t*\tDirty indicator methods");
		writeLine("\t*");
		writeLine("\t**************************************************************************/");

		writeLine();
		writeLine("\t/** Dirty indicator method - compares this instance against a baseline");
		writeLine("\t    Repository Item object.");
		writeLine("\t\t@param repositoryItem baseline Repository Item object used in");
		writeLine("\t\t\tcomparison.");
		writeLine("\t*/");
		writeLine("\tpublic boolean checkModified(RepositoryItem repositoryItem)");
		writeLine("\t{");
		writeLine("\t\t// Extract values from repositoryItem into an object of this type.");
		writeLine("\t\t" + strClassName + " comparisonObject = new " +
			strClassName + "();");
		writeLine();
		writeLine("\t\tcomparisonObject.loadBean(repositoryItem);");
		writeLine();
		writeLine("\t\t// Since the \"equals\" method also compares the keys, they");
		writeLine("\t\t// need to be the same. We are only interested in comparing");
		writeLine("\t\t// the other values.");
		writeLine("\t\tcomparisonObject.setKey(getKey());");
		writeLine();
		writeLine("\t\t// Was it modified?");
		writeLine("\t\treturn !equals(comparisonObject);");
		writeLine("\t}");
	}

	/** Output method - writes the member variable section. */
	private void writeMemberVariables() throws IOException
	{
		writeLine();
		writeLine("\t/**************************************************************************");
		writeLine("\t*");
		writeLine("\t*\tMember variables");
		writeLine("\t*");
		writeLine("\t**************************************************************************/");

		for (int i = 0; i < m_nProperties; i++)
		{
			writeLine();
			writeLine("\t/** Member variable - contains the \"" +
				m_propObjectNames[i] + "\" property value. */");
			writeLine("\tprivate " + m_propJavaTypes[i] + " " +
				m_propMemberVariables[i] + ";");
		}
	}

	/** Output method - writes the <CODE>toString</CODE> method. */
	private void writeToStringMethod() throws IOException
	{
		writeLine();
		writeLine("\t/**************************************************************************");
		writeLine("\t*");
		writeLine("\t*\ttoString/hashCode methods");
		writeLine("\t*");
		writeLine("\t**************************************************************************/");
		writeLine();
		writeLine("\t/** Identity method - returns a <I>String</I> that " +
			"represents this instance of the class. */");
		writeLine("\tpublic String toString()");
		writeLine("\t{");

		writeLine("\t\tStringBuffer returnValue = new StringBuffer(\"" +
			getClassName() + "{\");");
		writeLine();
		writeLine("\t\treturnValue.append(\"key=\" + getKey());");

		for (int i = 0; i < m_nProperties; i++)
			writeLine("\t\treturnValue.append(\", " + m_propObjectNames[i] +
				"=\" + " + m_propMemberVariables[i] + ");");

		writeLine();
		writeLine("\t\treturn returnValue.toString();");
		writeLine("\t}");
	}

	/** Output method - writes the <CODE>hashCode</CODE> method. */
	private void writeHashCodeMethod() throws IOException
	{
		writeLine();
		writeLine("\t/** Identity method - this instance's hash value. */");
		writeLine("\tpublic int hashCode() { return toString().hashCode(); }");
	}

	/** Output method - writes the <CODE>equals</CODE> method. */
	private void writeEqualsMethod() throws IOException
	{
		String strClassName = getClassName();

		// Start the method.
		writeLine();
		writeLine("\t/**************************************************************************");
		writeLine("\t*");
		writeLine("\t*\tequals method");
		writeLine("\t*");
		writeLine("\t**************************************************************************/");
		writeLine();
		writeLine("\t/** Identity method - indicates the equality of the supplied");
		writeLine("\t    object to this instance.");
		writeLine("\t\t@param value Object to check equality of.");
		writeLine("\t*/");
		writeLine("\tpublic boolean equals(Object value)");
		writeLine("\t{");
		writeLine("\t\tif ((null == value) || (!(value instanceof " + strClassName +
			")))");
		writeLine("\t\t\treturn false;");
		writeLine();
		writeLine("\t\t" + strClassName + " castedValue = (" + strClassName +
			") value;");

		// Compare the key.
		writeLine();
		writeLine("\t\tif (((castedValue.getKey() != null) && (getKey()" +
			" == null))");
		writeLine("\t\t   || ((getKey != null) && !getKey()" +
			".equals(castedValue.getKey())))");
		writeLine("\t\t\treturn false;");

		// Compare each member variable.
		for (int i = 0; i < m_nProperties; i++)
		{
			writeLine();

			if (m_propIsPrimitives[i])
				writeLine("\t\tif (castedValue." + m_propMemberVariables[i] +
					" != " + m_propMemberVariables[i] +
					")");
			else
			{
				writeLine("\t\tif (((castedValue." + m_propMemberVariables[i] +
					" != null) && (" + m_propMemberVariables[i] +
					" == null))");
				writeLine("\t\t   || ((" + m_propMemberVariables[i] +
					" != null) && !" + m_propMemberVariables[i] +
					".equals(castedValue." + m_propMemberVariables[i] +
					")))");
			}

			writeLine("\t\t\treturn false;");
		}

		// Wrap up the method call.
		writeLine();
		writeLine("\t\treturn true;");
		writeLine("\t}");
	}

	/** Output method - writes the <CODE>clone</CODE> method. */
	private void writeCloneMethod() throws IOException
	{
		String strClassName = getClassName();

		// Start the method.
		writeLine();
		writeLine("\t/**************************************************************************");
		writeLine("\t*");
		writeLine("\t*\tclone method");
		writeLine("\t*");
		writeLine("\t**************************************************************************/");

		writeLine();
		writeLine("\t/** Clone method - clones this instance of the class. */");
		writeLine("\tpublic Object clone()");
		writeLine("\t{");
		writeLine("\t\t" + strClassName + " clonedValue = new " + strClassName +
			"();");
		writeLine();

		for (int i = 0; i < m_nProperties; i++)
		{
			writeLine("\t\tclonedValue." + m_propMemberVariables[i] +
				" = " + m_propMemberVariables[i] + ";");
		}

		writeLine();
		writeLine("\t\treturn clonedValue;");
		writeLine("\t}");
	}

	/** Output method - writes the class footer. */
	private void writeFooter() throws IOException
	{
		writeLine("}");
	}

	/******************************************************************************
	*
	*	Accessor methods
	*
	*****************************************************************************/

	/** Accessor method - gets the object name of the data bean class.
	*/
	public String getClassName() { return m_strClassName; }

	/******************************************************************************
	*
	*	Mutator methods
	*
	*****************************************************************************/

	/** Mutator method - sets the XML DOM document that contains the parsed
	    Repository Item Descriptor.
	*/
	public void setDocument(Document document)
		throws DynamoMetaException, NullPointerException
	{
		super.setDocument(document);

		m_strClassName = getClassName(getName());
	}

	/******************************************************************************
	*
	*	Member variables
	*
	*****************************************************************************/

	/** Member variable - reference to the object name of the data bean class. */
	private String m_strClassName = null;

	/** Member variable - contains the number of properties in the current
	    item descriptor.
	*/
	private int m_nProperties = 0;

	/** Member variable - array of object names for each property. */
	private String[] m_propObjectNames = null;

	/** Member variable - array of method suffixes for each property. */
	private String[] m_propMethodSuffixes = null;

	/** Member variable - array of java types for each property. */
	private String[] m_propJavaTypes = null;

	/** Member variable - array of primitive indicators for each property. */
	private boolean[] m_propIsPrimitives = null;

	/** Member variable - array of member variable names for each property. */
	private String[] m_propMemberVariables = null;

	/******************************************************************************
	*
	*	Class entry point
	*
	*****************************************************************************/

	/** Command line entry point.
		@param strArg1 Output directory.
		@param strArg2 Input directory of the Repository Item Descriptors.
		@param strArg3 author of the generated classes. Will use the
			"user.name" system property value if not supplied.
		@param strArg4 package name of the data bean class.
	*/
	public static void main(String strArgs[])
	{
		try
		{
			// Have enough arguments been supplied?
			if (2 > strArgs.length)
				throw new IllegalArgumentException("Please supply at least 2 arguments.");

			// Local variables
			File fileOutputDir = extractOutputDirectory(strArgs, 0);
			File fileInputDir = extractDirectory(strArgs, 1, "input");
			String strAuthor = extractAuthor(strArgs, 2);
			String strPackageName = extractArgument(strArgs, 3, null);

			// Get the list of files.
			FileFilter fileFilter = new com.small.library.util.FileFilterByExtension("xml");
			File[] fileItemDescriptors =
				fileInputDir.listFiles(fileFilter);

			// Create the SQL Repository Item Descriptor generator.
			SQLRepositoryItemDataBean generator =
				new SQLRepositoryItemDataBean((PrintWriter) null, strAuthor,
				null, strPackageName);

			// Generate repository resource.
			generateRepositoryResource(generator, fileItemDescriptors, fileOutputDir);
		}

		catch (IllegalArgumentException pEx)
		{
			String strMessage = pEx.getMessage();

			if (null != strMessage)
			{
				System.out.println(strMessage);
				System.out.println();
			}

			System.out.println("Usage: java " + SQLRepositoryItemDataBean.class.getName() + " Output directory");
			System.out.println("\tInput directory of the Repository Item Descriptors");
			System.out.println("\t[Author]");
			System.out.println("\t[Package Name]");
		}

		catch (Exception pEx)
		{
			pEx.printStackTrace();
		}
	}
}
