package com.small.library.atg.gen;

import java.io.*;
import java.sql.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.w3c.dom.*;
import org.xml.sax.InputSource;
import org.apache.xerces.parsers.DOMParser;

import com.small.library.atg.meta.*;
import com.small.library.generator.*;
import com.small.library.xml.XMLHelper;

/***************************************************************************************
*
*	Generator class for Dynamo SQL Repository Item Value classes. Item Value
*	classes are simple Java classes that resemble C structs that represent
*	a <I>RepositoryItem</I>. Value class instances expose only public member
*	variables and are populated through value class handlers.
*	This overcomes the overly simple <CODE>
*	getPropertyValue</CODE> and <CODE>setPropertyValue</CODE> methods of
*	<I>RepositoryItem</I> (<I>MutableRepositoryItem</I>) that do not enforce
*	strict type safety during compile.
*
*	<BR><BR>
*
*	The value classes are generated by inspecting already created Repository Item
*	Descriptions, as opposed to using database meta data.
*
*	@author David Small
*	@version 1.0.0.0
*	@date 7/18/2002
*
***************************************************************************************/

public class SQLRepositoryItemValueObject extends SQLRepositoryItemBase
{
	/******************************************************************************
	*
	*	Constants
	*
	*****************************************************************************/

	/******************************************************************************
	*
	*	Static members
	*
	*****************************************************************************/

	/** Helper method - helps construct a value object class name based on a
	    repository item name.
		@param repositoryItemName Name of the repository item.
	*/
	public static String getClassName(String repositoryItemName)
	{
		return repositoryItemName + "Value";
	}

	/******************************************************************************
	*
	*	Constructors
	*
	*****************************************************************************/

	/** Constructor - constructs an empty object. */
	public SQLRepositoryItemValueObject() { super(); }

	/** Constructor - constructs a populated object.
		@param pWriter The output stream.
		@param strAuthor Name of the author.
		@param pDocuemnt XML DOM document that contains the parsed
			Repository Item Descriptor.
	*/
	public SQLRepositoryItemValueObject(PrintWriter pWriter,
		String strAuthor, Document pDocument)
			throws DynamoMetaException
	{
		super(pWriter, strAuthor, pDocument);
	}

	/** Constructor - constructs a populated object.
		@param pWriter The output stream.
		@param strAuthor Name of the author.
		@param pDocuemnt XML DOM document that contains the parsed
			Repository Item Descriptor.
		@param strPackageName Package name of the wrapper class.
	*/
	public SQLRepositoryItemValueObject(PrintWriter pWriter,
		String strAuthor, Document pDocument, String strPackageName)
			throws DynamoMetaException
	{
		super(pWriter, strAuthor, pDocument, strPackageName);
	}

	/******************************************************************************
	*
	*	Required methods: Base
	*
	*****************************************************************************/

	/** Action method - generates the SQL Repository Item Descriptor. */
	public void generate() throws GeneratorException, IOException
	{
		// pre populates commonly used item descriptor property information.
		populatePropertyInfo();

		// Output the wrapper class.
		writeHeader();
		writeClassDeclaration();

		writeMemberVariables();

		writeFooter();
	}

	/******************************************************************************
	*
	*	Helper methods
	*
	*****************************************************************************/

	/** Helper method - populates commonly used item descriptor property
	    information into member variables.
	*/
	private void populatePropertyInfo()
		throws GeneratorException
	{
		Collection properties = getDefaultItemDescriptor().getProperties();
		Iterator itProperties = properties.iterator();

		m_nProperties = properties.size();

		m_propObjectNames = new String[m_nProperties];
		m_propJavaTypes = new String[m_nProperties];
		m_propIsPrimitives = new boolean[m_nProperties];
		m_propMemberVariables = new String[m_nProperties];

		int i = 0;

		while (itProperties.hasNext())
		{
			Property property = (Property) itProperties.next();

			m_propObjectNames[i] = property.getName();
			m_propJavaTypes[i] = getJavaType(property);
			m_propIsPrimitives[i] = isPrimitive(m_propJavaTypes[i]);
			m_propMemberVariables[i] = m_propObjectNames[i];

			i++;
		}
	}

	/******************************************************************************
	*
	*	Output methods
	*
	*****************************************************************************/

	/** Output method - writes the file header. */
	private void writeHeader() throws IOException
	{
		String strPackageName = getPackageName();

		if (null != strPackageName)
		{
			writeLine("package " + strPackageName + ";");
			writeLine();
		}

		// Must include "java.util.*" becuase of Date, Set, List, and Map.

		writeLine("import java.io.Serializable;");
		writeLine("import java.sql.Timestamp;");
		writeLine("import java.util.*;");
		writeLine();
		writeLine("/**********************************************************************************");
		writeLine("*");
		writeLine("*\tValue class that represents the " + getName() + " repository item. Extracts ");
		writeLine("*\tand resets values from the repository item through a value class handler.");
		writeLine("*");
		writeLine("*\t@author " + getAuthor());
		writeLine("*\t@version 1.0.0.0");
		writeLine("*\t@date " + getDateString());
		writeLine("*");
		writeLine("**********************************************************************************/");
	}

	/** Output method - writes the class declaration. */
	private void writeClassDeclaration() throws IOException
	{
		writeLine();
		writeLine("public class " + getClassName() + " implements Serializable");
		writeLine("{");
	}

	/** Output method - writes the member variable section. */
	private void writeMemberVariables() throws IOException
	{
		writeLine("\t/**************************************************************************");
		writeLine("\t*");
		writeLine("\t*\tMember variables");
		writeLine("\t*");
		writeLine("\t**************************************************************************/");

		for (int i = 0; i < m_nProperties; i++)
		{
			writeLine();
			writeLine("\t/** Member variable - contains the \"" +
				m_propObjectNames[i] + "\" property value. */");
			writeLine("\tpublic " + m_propJavaTypes[i] + " " +
				m_propMemberVariables[i] + ";");
		}
	}

	/** Output method - writes the class footer. */
	private void writeFooter() throws IOException
	{
		writeLine("}");
	}

	/******************************************************************************
	*
	*	Accessor methods
	*
	*****************************************************************************/

	/** Accessor method - gets the object name of the data bean class.
	*/
	public String getClassName() { return m_strClassName; }

	/******************************************************************************
	*
	*	Mutator methods
	*
	*****************************************************************************/

	/** Mutator method - sets the XML DOM document that contains the parsed
	    Repository Item Descriptor.
	*/
	public void setDocument(Document document)
		throws DynamoMetaException, NullPointerException
	{
		super.setDocument(document);

		m_strClassName = getClassName(getName());
	}

	/******************************************************************************
	*
	*	Member variables
	*
	*****************************************************************************/

	/** Member variable - reference to the object name of the data bean class. */
	private String m_strClassName = null;

	/** Member variable - contains the number of properties in the current
	    item descriptor.
	*/
	private int m_nProperties = 0;

	/** Member variable - array of object names for each property. */
	private String[] m_propObjectNames = null;

	/** Member variable - array of java types for each property. */
	private String[] m_propJavaTypes = null;

	/** Member variable - array of primitive indicators for each property. */
	private boolean[] m_propIsPrimitives = null;

	/** Member variable - array of member variable names for each property. */
	private String[] m_propMemberVariables = null;

	/******************************************************************************
	*
	*	Class entry point
	*
	*****************************************************************************/

	/** Command line entry point.
		@param strArg1 Output directory.
		@param strArg2 Input directory of the Repository Item Descriptors.
		@param strArg3 author of the generated classes. Will use the
			"user.name" system property value if not supplied.
		@param strArg4 package name of the data bean class.
	*/
	public static void main(String strArgs[])
	{
		try
		{
			// Have enough arguments been supplied?
			if (2 > strArgs.length)
				throw new IllegalArgumentException("Please supply at least 2 arguments.");

			// Local variables
			File fileOutputDir = extractOutputDirectory(strArgs, 0);
			File fileInputDir = extractDirectory(strArgs, 1, "input");
			String strAuthor = extractAuthor(strArgs, 2);
			String strPackageName = extractArgument(strArgs, 3, null);

			// Get the list of files.
			FileFilter fileFilter = new com.small.library.util.FileFilterByExtension("xml");
			File[] fileItemDescriptors =
				fileInputDir.listFiles(fileFilter);

			// Create the SQL Repository Item Descriptor generator.
			SQLRepositoryItemValueObject generator =
				new SQLRepositoryItemValueObject((PrintWriter) null, strAuthor,
				null, strPackageName);

			// Generate repository resource.
			generateRepositoryResource(generator, fileItemDescriptors, fileOutputDir);
		}

		catch (IllegalArgumentException pEx)
		{
			String strMessage = pEx.getMessage();

			if (null != strMessage)
			{
				System.out.println(strMessage);
				System.out.println();
			}

			System.out.println("Usage: java " + SQLRepositoryItemValueObject.class.getName() + " Output directory");
			System.out.println("\tInput directory of the Repository Item Descriptors");
			System.out.println("\t[Author]");
			System.out.println("\t[Package Name]");
		}

		catch (Exception pEx)
		{
			pEx.printStackTrace();
		}
	}
}
