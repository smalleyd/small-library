package com.small.library.servlet;

import java.io.*;
import java.util.*;

import javax.servlet.http.HttpServletRequest;

import com.small.library.util.ArrayListString;

/***************************************************************************************
*
*	Handles Multipart Form data. Accepts a <I>javax.servlet.http.HttpServletRequest</I>
*	object that contains the Form data. The HTML form must contain the
*	<CODE>ENCTYPE</CODE> tag with a value of "multipart/form-data".
*
*	@author i-Deal\David Small
*	@version 1.0.0.0
*	@date 8/3/2000
*
***************************************************************************************/

public class FileUp
{
	/******************************************************************************
	*
	*	Constants
	*
	*****************************************************************************/

	/** Constant - Multipart/form-data information separator. */
	private static final String INFO_SEPARATOR = "-----------------------------";

	/** Constant - Multipart/form-data content header. */
	private static final String CONTENT_HEADER = "Content-Disposition: form-data; name=\"";

	/** Constant - Multipart/form-data content type. */
	private static final String CONTENT_TYPE = "Content-Type: ";

	/** Constant - Multipart/form-data file information. */
	private static final String FILE_INFO = "; filename=\"";

	/** Constant - Multipart/form-data line separator. */
	private static final String LINE_SEPARATOR = "\r\n";

	/** Constant - Multipart/form-data data separator. */
	private static final String HEADER_DATA_SEPARATOR = LINE_SEPARATOR + LINE_SEPARATOR;

	/** Constant - Multipart/form-data content terminator. */
	private static final String CONTENT_TERMINATOR = LINE_SEPARATOR + INFO_SEPARATOR;


	/** Constant - Multipart/form-data content header length. */
	private static final int LEN_CONTENT_HEADER = CONTENT_HEADER.length();

	/** Constant - Multipart/form-data content type length. */
	private static final int LEN_CONTENT_TYPE = CONTENT_TYPE.length();

	/** Constant - Multipart/form-data file information length. */
	private static final int LEN_FILE_INFO = FILE_INFO.length();

	/** Constant - Multipart/form-data line separator length. */
	private static final int LEN_LINE_SEPARATOR = LINE_SEPARATOR.length();

	/** Constant - Multipart/form-data data separator length. */
	private static final int LEN_HEADER_DATA_SEPARATOR = HEADER_DATA_SEPARATOR.length();

	/** Constant - Multipart/form-data content terminator length. */
	private static final int LEN_CONTENT_TERMINATOR = CONTENT_TERMINATOR.length();

	/******************************************************************************
	*
	*	Constructors
	*
	*****************************************************************************/

	/** Constructor - accepts a <I>javax.servlet.http.HttpServletRequest</I> object. The constructor
	    reads the data, parses the data, and exposes the data.
		@pRequest The Http Request object.
	*/
	public FileUp(HttpServletRequest pRequest) throws IOException
	{
		m_Keys = new HashMap();
		m_Data = new ArrayList();

		getData(pRequest);
	}

	/******************************************************************************
	*
	*	Helper methods
	*
	*****************************************************************************/

	/** Helper method - Pulls the data in from the HTML post. */
	private void getData(HttpServletRequest pRequest) throws IOException
	{
		int nLength = pRequest.getContentLength();

		// Do nothing - no data.
		if (0 == nLength)
			return;

		// Throw an exception - indicate that the length is not known.
		if (-1 == nLength)
			throw new IOException("The content length of the input stream is not known.");

		byte[] pBytes = new byte[nLength];
		InputStream pIn = pRequest.getInputStream();

		// Get the data.
		pIn.read(pBytes, 0, nLength);

		// Create a string with the data.
		String strBytes = new String(pBytes, "ISO-8859-1");

		// Parse the data.
		parseData(strBytes, pBytes);
	}

	/** Parses the contents of the bytes read from the post. */
	private void parseData(String strData, byte pData[])
	{
		int nSearchPoint = 0;
		int nSearchResult = -1;
		int nLength = strData.length();
		Object pValue = null;

		while (0 <= nSearchPoint)
		{
			nSearchResult = strData.indexOf(CONTENT_HEADER, nSearchPoint);

			if (0 > nSearchResult)
				break;

			nSearchPoint = nSearchResult + LEN_CONTENT_HEADER;

			nSearchResult = strData.indexOf("\"", nSearchPoint);

			if (0 > nSearchResult)
				break;

			String strKey = strData.substring(nSearchPoint, nSearchResult);

			nSearchResult++;

			// Determine if it is a file?
			if ((nLength > nSearchResult + LEN_FILE_INFO) &&
				strData.substring(nSearchResult, nSearchResult + LEN_FILE_INFO).equals(FILE_INFO))
			{
				// Set the next search point.
				nSearchPoint = nSearchResult + LEN_FILE_INFO;

				if ('"' == strData.charAt(nSearchPoint))
				{
					pValue = new Content();	// Create a blank content.
					nSearchPoint++;
				}
				else
				{
					nSearchResult = strData.indexOf("\"", nSearchPoint);
					Content pContent = new Content(strData.substring(nSearchPoint, nSearchResult));

					// Has a valid content type been defined?
					nSearchResult+= LEN_LINE_SEPARATOR + 1;
					if ((nLength > nSearchResult + LEN_CONTENT_TYPE) &&
						strData.substring(nSearchResult, nSearchResult + LEN_CONTENT_TYPE).equals(CONTENT_TYPE))
					{
						nSearchPoint = nSearchResult + LEN_CONTENT_TYPE;
						nSearchResult = strData.indexOf(LINE_SEPARATOR, nSearchPoint);
						pContent.setType(strData.substring(nSearchPoint, nSearchResult));

						nSearchPoint = nSearchResult + LEN_HEADER_DATA_SEPARATOR;
						nSearchResult = strData.indexOf(CONTENT_TERMINATOR, nSearchPoint);
						pContent.setData(pData, nSearchPoint, nSearchResult - 1);
					}

					pValue = pContent;
				}
			}

			else
			{
				nSearchPoint = nSearchResult + LEN_HEADER_DATA_SEPARATOR;
				nSearchResult = strData.indexOf(CONTENT_TERMINATOR, nSearchPoint);

				if (0 > nSearchResult)
					break;

				pValue = strData.substring(nSearchPoint, nSearchResult);
			}

			// If the key is duplicated it means more than one form element
			// used the same name. Put all values in array list.
			// Do not remove any values - it will throw off the other keys.
			Object pOldValue = getObject(strKey);

			if ((null != pOldValue) && (pOldValue instanceof ArrayList))
				((ArrayList) pOldValue).add(pValue);

			else
			{
				if (null != pOldValue)
				{
					ArrayList pNewList = new ArrayList();
					pNewList.add(pOldValue);
					pNewList.add(pValue);
					pValue = pNewList;
				}

				m_Data.add(pValue);
				m_Keys.put(strKey, new Integer(m_Data.size()));
			}

			nSearchPoint = nSearchResult + LEN_CONTENT_TERMINATOR;
		}
	}

	/******************************************************************************
	*
	*	Accessor methods
	*
	*****************************************************************************/

	/** Accessor method - Retrieve the number of items in the collection. */
	public int size() { return m_Data.size(); }

	/** Accessor method - gets an <I>Iterator</I> to the keys on the items
	    in the collection.
	*/
	public Iterator getKeys() { return m_Keys.keySet().iterator(); }

	/** Accessor method - get boolean data. */
	public boolean getBoolean(String strKey) { return 0 == getInt(strKey); }

	/** Accessor method - get  data. */
	public double getDate(String strKey) { return getDouble(strKey); }

	/** Accessor method - get  data. */
	public double getDouble(String strKey)
	{
		String strValue = getString(strKey);

		if (null == strValue)
			return 0D;

		return Double.parseDouble(strValue);
	}

	/** Accessor method - get  data. */
	public float getFloat(String strKey) { return (float) getDouble(strKey); }

	/** Accessor method - get  data. */
	public int getInt(String strKey)
	{
		String strValue = getString(strKey);

		if (null == strValue)
			return 0;

		return Integer.parseInt(strValue);
	}

	/** Accessor method - get  data. */
	public Object getObject(String strKey)
	{
		Integer pIndex = (Integer) m_Keys.get(strKey);

		if (null == pIndex)
			return null;

		return m_Data.get(pIndex.intValue() - 1);
	}

	/** Accessor method - get  data. */
	public short getShort(String strKey) { return (short) getInt(strKey); }

	/** Accessor method - get  data. */
	public String getString(String strKey)
	{
		Object pValue = getObject(strKey);

		if (null == pValue)
			return null;

		return pValue.toString();
	}

	/** Accessor method - get  data. */
	public ArrayList getStrings(String strKey)
	{
		Object pValues = getObject(strKey);

		if (null == pValues)
			return null;

		if (pValues instanceof ArrayList)
			return (ArrayList) pValues;

		if (0 == pValues.toString().length())
			return null;

		return (ArrayList) new ArrayListString(pValues.toString(), ", ");
	}

	/** Accessor method - get  data. */
	public Content getContent(String strKey)
	{
		Integer pIndex = (Integer) m_Keys.get(strKey);

		if (null == pIndex)
			return null;

		Object pObject = m_Data.get(pIndex.intValue() - 1);

		if (pObject instanceof Content)
			return (Content) pObject;

		return null;
	}

	/******************************************************************************
	*
	* Private member variables
	*
	*****************************************************************************/

	/** Member variable - contains the indexes to the data. */
	private Map m_Keys = null;

	/** Member variable - contains the form data, parsed out. */
	private ArrayList m_Data = null;

/***************************************************************************************
*
*	Class that encapsulates file information retrieved from the HTTP post.
*
*	@author Xpedior\David Small
*	@version 1.0.0.0
*	@date 8/3/2001
*
***************************************************************************************/

	public static class Content
	{
		/** Constructor - default - only accessible by the parent class. */
		private Content() {}

		/** Constructor - accepts a string value for the file name. */
		private Content(String strName) { setName(strName); }

		/******************************************************************************
		*
		*	Accessors
		*
		*****************************************************************************/

		/** Accessor - retrieves the name of the file. */
		public String toString() { return getName(); }

		/** Accessor - retrieves the Name property. */
		public String getName() { return m_strName; }

		/** Accessor - retrieves the (Content) Type property. */
		public String getType() { return m_strType; }

		/** Accessor - retrieves the file title of the fully qualified file name. */
		public String getTitle() { return m_strTitle; }

		/** Accessor - retrieves the file extension of the fully qualified file name. */
		public String getExtension() { return m_strExtension; }

		/** Accessor - retrieves the actual Data file itself. */
		public byte[] getData() { return m_Values; }

		/** Accessor - indicates whether the Content object is valid? */
		public boolean isValid() { return (null == getName()) ? false : true; }

		/** Accessor - indicates whether the Content is without data. */
		public boolean isEmpty() { return (null == getData()) ? true : false; }

		/******************************************************************************
		*
		*	Mutators - only accessible by the parent class
		*
		*****************************************************************************/

		/** Mutator - updates the Name property. */
		private void setName(String strNewValue)
		{ m_strName = strNewValue; setTitle(strNewValue); setExtension(strNewValue); }

		/** Mutator - updates the (Content) Type property. */
		private void setType(String strNewValue) { m_strType = strNewValue; }

		/** Mutator - updates the Data property. This is the actual file. */
		private void setData(byte pNewValue[]) { m_Values = pNewValue; }

		/** Mutator - updates the Data property. This is the actual file. */
		private void setData(String strNewValue) { setData(strNewValue.getBytes()); }
		
		/** Mutator - updates the Data property based on an array of bytes,
		    the starting point, and the ending point. */
		private void setData(byte pNewValue[], int nStart, int nEnd)
		{
			if (nEnd < nStart)
			{
				m_Values = null;
				return;
			}

			m_Values = new byte[nEnd - nStart + 1];

			for (int i = nStart; i <= nEnd; i++)
				m_Values[i - nStart] = pNewValue[i];
		}

		/** Mutator - supplies a fully qualified file name. */
		private void setTitle(String strFileName)
		{
			int nLastSlash = strFileName.lastIndexOf('\\');
			int nPeriod = strFileName.lastIndexOf(".");

			if (-1 == nLastSlash)
				nLastSlash = strFileName.lastIndexOf('/');

			if (-1 == nPeriod)
				nPeriod = strFileName.length();

			m_strTitle = strFileName.substring(nLastSlash + 1, nPeriod);
		}

		/** Mutator - supplies a fully qualified file name. */
		private void setExtension(String strFileName)
		{
			int nPeriod = strFileName.lastIndexOf(".");

			if ((-1 == nPeriod) || (nPeriod == (strFileName.length() - 1)))
				m_strExtension = null;
			else
				m_strExtension = strFileName.substring(nPeriod + 1);
		}

		/******************************************************************************
		*
		*	Member variables
		*
		*****************************************************************************/

		private String m_strName = null;
		private String m_strType = null;
		private String m_strTitle = null;
		private String m_strExtension = null;
		private byte m_Values[] = null;
	}
}
