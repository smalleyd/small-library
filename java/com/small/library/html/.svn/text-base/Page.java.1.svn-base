package com.small.library.html;

import java.io.*;

/***************************************************************************************
*
*	Provides methods for creating HTML pages. Also, provides references to other
*	HTML objects for enhancing the page.
*	@author Xpedior\David Small
*	@version 1.0.0.0
*	@date 2/16/2000
*
***************************************************************************************/

public class Page extends Base
{
	/******************************************************************************
	*
	* Public constants
	*
	******************************************************************************/

	/** Constant - represents the opening <I>HTML</I> tag. */
	public static final String TAG_HTML = "HTML";

	/** Constant - represents the <I>HEAD</I> tag. */
	public static final String TAG_HEAD = "HEAD";

	/** Constant - represents the <I>TITLE</I> tag. */
	public static final String TAG_TITLE = "TITLE";

	/** Constant - represents the <I>BODY</I> tag. */
	public static final String TAG_BODY = "BODY";

	/** Constant - represents the <I>P</I> (paragraph) tag. */
	public static final String TAG_PARAGRAPH = "P";

	/** Constant - represents the line break tag. */
	public static final String TAG_BR = "BR";

	/** Constant - represents the horizontal rule tag. */
	public static final String TAG_HR = "HR";

	/** Constant - represents the anchor tag. */
	public static final String TAG_ANCHOR = Link.TAG;

	/** Constant - represents the <I>SMALL</I> font tag. */
	public static final String TAG_SMALL = "SMALL";

	/** Constant - represents the <I>BIG</I> font tag. */
	public static final String TAG_BIG = "BIG";

	/** Constant - represents the <I>FONT</I> tag. */
	public static final String TAG_FONT = "FONT";

	/** Constant - represents the bold font tag. */
	public static final String TAG_BOLD = "B";

	/** Constant - represents the italics font tag. */
	public static final String TAG_ITALIC = "I";

	/** Constant - represents the underline font tag. */
	public static final String TAG_UNDERLINE = "U";

	/** Constant - represents the link tag used mainly for cascading style sheets. */
	public static final String TAG_LINK = "LINK";

	/** Constant - represents the <I>SPAN</I> tag used to represent a
	    style sheet class. */
	public static final String TAG_SPAN = "SPAN";

	/** Constant - represents the image tag. */
	public static final String TAG_IMAGE = Image.TAG;

	/** Constant - represents the main <I>SCRIPT</I> tag. */
	public static final String TAG_SCRIPT = "SCRIPT";

	/** Constant - Escape sequence for a Non-breaking space - <I>nbsp;</I>. */
	public static final String ESCAPE_NBSP = "&nbsp;";

	/** Constant - Escape sequence for a less than sign - <I>lt;</I>. */
	public static final String ESCAPE_LESS_THAN = "&lt;";

	/** Constant - Escape sequence for a greater than sign - <I>gt;</I>. */
	public static final String ESCAPE_GREATER_THAN = "&gt;";

	/******************************************************************************
	*
	* Constructors & Destructor
	*
	******************************************************************************/

	/** Accepts any OutputStream object. */
	public Page(OutputStream pStream) { super(pStream); }

	/** Accepts any object implementing the DataOutput interface. */
	public Page(DataOutput pStream) { super(pStream); }

	/******************************************************************************
	*
	* Open/close the "page" functionality
	*
	******************************************************************************/

	/** Starts the HTML page. */
	public void open() throws IOException { writeTag(TAG_HTML); writeNewLine(); }

	/** Ends the HTML page. */
	public void close() throws IOException { writeTagClosing(TAG_HTML); }

	/** Starts an HTML header. */
	public void openHead() throws IOException { writeTag(TAG_HEAD); }

	/** Ends an HTML header. */
	public void closeHead() throws IOException { writeTagClosing(TAG_HEAD); writeNewLine(); }

	/** Adds a title to the page. */
	public void addTitle(String strTitle) throws IOException
	{ writeTag(TAG_TITLE); write(strTitle); writeTagClosing(TAG_TITLE); }

	/** Adds a cascading style sheet reference to the page. */
	public void addCascadingStyleSheet(String strLocation) throws IOException
	{
		openTag(TAG_LINK);

		writeAttribute("REL", "STYLESHEET");
		writeAttribute("HREF", strLocation);
		writeAttribute("TYPE", "text/css");

		closeTag();
	}

	/** Starts the HTML body. */
	public void openBody() throws IOException { writeTag(TAG_BODY); writeNewLine(); }

	/** Starts the HTML body.
		@param strLink Adds a LINK color attribute.
		@param strVisitedLink Adds a VLINK color attribute.
		@param strActiveLink Adds a ALINK color attribute.
		@param strOnBody Adds the onLoad event to the body tag.
		@param strBackground Adds a BACKGROUND attribute to the body tag.
	*/
	public void openBody(String strLink, String strVisitedLink,
		String strActiveLink, String strOnLoad,
		String strBackground) throws IOException
	{
		openTag(TAG_BODY);

		writeAttribute("LINK", strLink);
		writeAttribute("VLINK", strVisitedLink);
		writeAttribute("ALINK", strActiveLink);
		writeAttribute("onLoad", strOnLoad);
		writeAttribute("BACKGROUND", strBackground);

		closeTag();

		writeNewLine();
	}

	/** Starts the HTML body.
		@param strLink Adds a LINK color attribute.
		@param strVisitedLink Adds a VLINK color attribute.
		@param strActiveLink Adds a ALINK color attribute.
		@param strOnBody Adds the onLoad event to the body tag.
	*/
	public void openBody(String strLink, String strVisitedLink,
		String strActiveLink, String strOnLoad) throws IOException
	{ openBody(strLink, strVisitedLink, strActiveLink, strOnLoad, null); }

	/** Starts the HTML body.
		@param strLink Adds a LINK color attribute.
	*/
	public void openBody(String strLink) throws IOException
	{ openBody(strLink, null, null, null); }

	/** Starts the HTML body.
		@param strLink Adds a LINK color attribute.
		@param strVisitedLink Adds a VLINK color attribute.
		@param strActiveLink Adds a ALINK color attribute.
	*/
	public void openBody(String strLink, String strVisitedLink,
		String strActiveLink) throws IOException
	{ openBody(strLink, strVisitedLink, strActiveLink, null); }

	/** Ends the HTML body. */
	public void closeBody() throws IOException { writeTagClosing(TAG_BODY); writeNewLine(); }

	/** Starts a <CODE>Paragraph</CODE> block. */
	public void openParagraph() throws IOException { writeTag(TAG_PARAGRAPH); }

	/** Ends a <CODE>Paragraph</CODE> block. */
	public void closeParagraph() throws IOException { writeTagClosing(TAG_PARAGRAPH); writeNewLine(); }

	/** Adds an entire <CODE>Paragraph</CODE> block to the page.
		@param strValue <I>String</I> representation of the paragraph content.
	*/
	public void addParagraph(String strValue) throws IOException
	{ openParagraph(); write(strValue); closeParagraph(); }

	/** Adds an HTML break &lt;BR&gt; tag. */
	public void addBreak() throws IOException { writeTag(TAG_BR); }

	/** Adds multiple HTML break &lt;BR&gt; tags. */
	public void addBreak(int nCount) throws IOException
	{ for (int i = 0; i < nCount; i++) addBreak(); }

	/** Adds an HTML horizontal rule &lt;HR&gt; tag.
	    @param bNoShade if true includes the NOSHADE attribute in the tag. */
	public void addHorizontalRule(boolean bNoShade) throws IOException
	{
		openTag(TAG_HR);
		if (bNoShade) write(" NOSHADE");
		closeTag();
	}

	/** Adds an HTML horizontal rule &lt;HR&gt; tag. */
	public void addHorizontalRule() throws IOException
	{ addHorizontalRule(false); }

	/** Opens an HTML link.
		@param strHref Adds HREF attribute to tag.
		@param strOnClick Adds an <I>onClick</I> event to the tag.
		@param strTarget Adds a <I>target</I> attribute to the tag.
		@param strClass Adds a cascading style sheet <I>class</I> attribute to the tag.
	*/
	public void openLink(String strHref, String strOnClick,
		String strTarget, String strClass) throws IOException
	{ write((new Link(strHref, null, strOnClick, strTarget, strClass, null)).getOpen()); }

	/** Opens an HTML link.
		@param strHref Adds HREF attribute to tag.
		@param strOnClick Adds an <I>onClick</I> event to the tag.
		@param strTarget Adds a <I>target</I> attribute to the tag.
	*/
	public void openLink(String strHref, String strOnClick,
		String strTarget) throws IOException
	{ openLink(strHref, strOnClick, strTarget, null); }

	/** Opens an HTML link.
		@param strHref Adds HREF attribute to tag.
		@param strOnClick Adds an <I>onClick</I> event to the tag.
	*/
	public void openLink(String strHref, String strOnClick) throws IOException
	{ openLink(strHref, strOnClick, null); }

	/** Opens an HTML link.
		@param strHref Adds HREF attribute to tag.
	*/
	public void openLink(String strHref) throws IOException
	{ openLink(strHref, null); }

	/** Closes an HTML link. */
	public void closeLink() throws IOException
	{ writeTagClosing(TAG_ANCHOR); }

	/** Adds an HTML link to the page.
		@param pLink An <I>Link</I> object.
	*/
	public void addLink(Link pLink) throws IOException
	{ write(pLink.toHTML()); }

	/** Adds an HTML link to the page.
		@param strHref Adds HREF attribute to tag.
		@param strCaption The caption for the link.
		@param strOnClick Adds an <I>onClick</I> event to the tag.
		@param strTarget Adds a <I>target</I> attribute to the tag.
		@param strClass Adds a cascading style sheet <I>class</I> attribute to the tag.
	*/
	public void addLink(String strHref, String strCaption,
		String strOnClick, String strTarget, String strClass)
			throws IOException
	{ addLink(new Link(strHref, strCaption, strOnClick, strTarget, strClass, null)); }

	/** Adds an HTML link to the page.
		@param strHref Adds HREF attribute to tag.
		@param strCaption The caption for the link.
		@param strOnClick Adds an <I>onClick</I> event to the tag.
		@param strTarget Adds a <I>target</I> attribute to the tag.
	*/
	public void addLink(String strHref, String strCaption,
		String strOnClick, String strTarget) throws IOException
	{ addLink(strHref, strCaption, strOnClick, strTarget, null); }

	/** Adds an HTML link to the page.
		@param strHref Adds HREF attribute to tag.
		@param strCaption The caption for the link.
		@param strOnClick Adds an <I>onClick</I> event to the tag.
	*/
	public void addLink(String strHref, String strCaption,
		String strOnClick) throws IOException
	{ addLink(strHref, strCaption, strOnClick, null); }

	/** Adds an HTML link to the page.
		@param strHref Adds HREF attribute to tag.
		@param strCaption The caption for the link.
	*/
	public void addLink(String strHref, String strCaption)
		throws IOException
	{ addLink(strHref, strCaption, null); }

	/** Adds an HTML link to the page.
		@param strHref Adds HREF attribute to tag.
	*/
	public void addLink(String strHref)
		throws IOException
	{ addLink(strHref, strHref, null); }

	/** Adds an HTML named area to the page. Uses the anchor tag.
		@param strName Adds NAME attribute to tag.
		@param strCaption The caption for the named area.
	*/
	public void addName(String strName, String strCaption)
		throws IOException
	{
		openTag(TAG_ANCHOR);

		writeAttribute("NAME", strName);

		closeTag();

		write(strCaption);

		writeTagClosing(TAG_ANCHOR);
	}

	/** Adds an HTML link to a named area on the page.
		@param strName Indicates the named area to move focus to.
		@param strCaption The caption for the link.
		@param strOnClick Adds an onClick event to the tag.
	*/
	public void addNameLink(String strName, String strCaption,
		String strOnClick) throws IOException
	{ addLink("#" + strName, strCaption, strOnClick); }

	/** Adds an HTML link to a named area on the page.
		@param strName Indicates the named area to move focus to.
		@param strCaption The caption for the link.
	*/
	public void addNameLink(String strName, String strCaption)
		throws IOException
	{ addNameLink(strName, strCaption, null); }

	/** Adds an HTML link to a named area on the page.
		@param strName Indicates the named area to move focus to.
	*/
	public void addNameLink(String strName)
		throws IOException
	{ addNameLink(strName, strName, null); }

	/** Adds an HTML link on the page for an email address.
		@param strEMailAddress The address of the link.
		@param strCaption The caption for the link.
		@param strOnClick Adds an onClick event to the tag.
	*/
	public void addEMailLink(String strEMailAddress, String strCaption,
		String strOnClick) throws IOException
	{ addLink("mailto:" + strEMailAddress, strCaption, strOnClick); }

	/** Adds an HTML link on the page for an email address.
		@param strEMailAddress The address of the link.
		@param strCaption The caption for the link.
	*/
	public void addEMailLink(String strEMailAddress, String strCaption)
		throws IOException
	{ addEMailLink(strEMailAddress, strCaption, null); }

	/** Adds an HTML link on the page for an email address.
		@param strEMailAddress The address and the caption for the link.
	*/
	public void addEMailLink(String strEMailAddress)
		throws IOException
	{ addEMailLink(strEMailAddress, strEMailAddress, null); }

	/** Adds text within a &lt;SMALL&gt; tag. */
	public void addSmallText(String strText) throws IOException
	{ writeTag(TAG_SMALL); write(strText); writeTagClosing(TAG_SMALL); }

	/** Adds text within a &lt;BIG&gt; tag. */
	public void addBigText(String strText) throws IOException
	{ writeTag(TAG_BIG); write(strText); writeTagClosing(TAG_BIG); }

	/** Adds text within a &lt;H1&gt;, &lt;H2&gt;, &lt;H3&gt; tags. */
	public void addCaption(String strText, int nSize) throws IOException
	{ writeTag("H" + nSize); write(strText); writeTagClosing("H" + nSize); }

	/** Opens a &lt;FONT&gt; tag. */
	public void openFont(String strFace, int nSize, String strColor)
		throws IOException
	{
		openTag(TAG_FONT);
		writeAttribute("FACE", strFace);
		writeAttribute("SIZE", nSize);
		writeAttribute("COLOR", strColor);
		closeTag();
	}

	/** Opens a &lt;FONT&gt; tag. */
	public void openFont(String strFace, int nSize) throws IOException
	{ openFont(strFace, nSize, null); }

	/** Opens a &lt;FONT&gt; tag. */
	public void openFont(String strFace, String strColor) throws IOException
	{ openFont(strFace, 0, strColor); }

	/** Opens a &lt;FONT&gt; tag. */
	public void openFont(String strFace) throws IOException
	{ openFont(strFace, 0, null); }

	/** Opens a &lt;FONT&gt; tag. */
	public void openFont(int nSize) throws IOException
	{ openFont(null, nSize, null); }

	/** Closes a &lt;FONT&gt; tag. */
	public void closeFont() throws IOException
	{ writeTagClosing(TAG_FONT); }

	/** Adds text within a &lt;B&gt; tag. */
	public void addBold(String strText) throws IOException
	{ writeTag(TAG_BOLD); write(strText); writeTagClosing(TAG_BOLD); }

	/** Adds text within a &lt;I&gt; tag. */
	public void addItalic(String strText) throws IOException
	{ writeTag(TAG_ITALIC); write(strText); writeTagClosing(TAG_ITALIC); }

	/** Adds text within a &lt;U&gt; tag. */
	public void addUnderline(String strText) throws IOException
	{ writeTag(TAG_UNDERLINE); write(strText); writeTagClosing(TAG_UNDERLINE); }

	/** Opens a cascading style sheet SPAN tag. */
	public void openSpan(String strCSSClass) throws IOException
	{
		openTag(TAG_SPAN);
		writeAttribute("CLASS", strCSSClass);
		closeTag();
	}

	/** Closes a cascading style sheet SPAN tag. */
	public void closeSpan() throws IOException
	{ writeTagClosing(TAG_SPAN); }

	/** Opens a SPAN tag, writes text, and closes the SPAN tag. */
	public void addSpan(String strValue, String strCSSClass) throws IOException
	{ openSpan(strCSSClass); write(strValue); closeSpan(); }

	/** Adds an <I>Image</I> to the page.
		@param pImage An Image object.
	*/
	public void addImage(Image pImage) throws IOException
	{ write(pImage.toHTML()); }

	/** Adds an image to the page.
		@param strSource Represents the URL of the image.
		@param strWidth Represents the Width of the image.
		@param strHeight Represents the Height of the image.
		@param strAlt Represents the alternate text for the image.
		@param nBorder Represents the border width for the image.
	*/
	public void addImage(String strSource, String strWidth, String strHeight,
		String strAlt, int nBorder) throws IOException
	{ addImage(new Image(strSource, strWidth, strHeight, strAlt, nBorder)); }

	/** Adds an image to the page.
		@param strSource Represents the URL of the image.
		@param strWidth Represents the Width of the image.
		@param strHeight Represents the Height of the image.
		@param strAlt Represents the alternate text for the image.
	*/
	public void addImage(String strSource, String strWidth, String strHeight,
		String strAlt) throws IOException
	{ addImage(strSource, strWidth, strHeight, strAlt, Image.BORDER_EMPTY); }

	/** Adds an image to the page.
		@param strSource Represents the URL of the image.
		@param strWidth Represents the Width of the image.
		@param strHeight Represents the Height of the image.
	*/
	public void addImage(String strSource, String strWidth, String strHeight)
		throws IOException
	{ addImage(strSource, strWidth, strHeight, null, Image.BORDER_EMPTY); }

	/** Adds an image to the page.
		@param strSource Represents the URL of the image.
	*/
	public void addImage(String strSource) throws IOException
	{ addImage(strSource, null, null, null, Image.BORDER_EMPTY); }

	/******************************************************************************
	*
	* Returns references to other HTML helper objects.
	*
	******************************************************************************/

	/** Returns a reference to the Form object. */
	public Form getForm() { return new Form(getStream()); }

	/** Returns a reference to the Form object that uses the supplied Cascading
	    Style Sheet Class.
		@param strCSSStyle String reference to the cascading style sheet class.
	*/
	public Form getForm(String strCSSClass) { return new Form(getStream(), strCSSClass); }

	/** Returns a reference to the Table object. */
	public Table getTable() { return new Table(getStream()); }

	/** Returns a reference to the Script object. */
	public Script getScript() { return new Script(getStream()); }

	/******************************************************************************
	*
	* Expose functionality from the parent class.
	*
	******************************************************************************/

	/** Exposes the "write" method from Base. */
	public void write(String strValue) throws IOException
	{ super.write(strValue); }

	/** Exposes the "writeLine" method from Base. */
	public void writeLine(String strValue) throws IOException
	{ super.writeLine(strValue); }

	/******************************************************************************
	*
	* Private helper functions
	*
	******************************************************************************/

	/** Helps write integer attribute information for tags. */
	protected void writeAttribute(String strName, int nValue)
		throws IOException
	{
		if (0 != nValue)
			super.writeAttribute(strName, nValue);
	}

	/******************************************************************************
	*
	* Private member variables
	*
	******************************************************************************/
}
