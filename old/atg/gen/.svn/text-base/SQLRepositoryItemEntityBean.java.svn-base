package com.small.library.atg.gen;

import java.io.*;
import java.sql.*;
import java.util.*;

import org.w3c.dom.*;
import org.xml.sax.InputSource;
import org.apache.xerces.parsers.DOMParser;

import com.small.library.atg.meta.*;
import com.small.library.ejb.gen.EntityBeanPrimaryKey;
import com.small.library.generator.*;
import com.small.library.xml.XMLHelper;

/***************************************************************************************
*
*	Generator class for Dynamo SQL Repository Item Entity Beans. Item Entity
*	Beans are EJB entity bean BMP classes that represent a <I>RepositoryItem</I> and
*	expose accessors and mutators of an entity for each property that closely
*	matches a property's type. This overcomes the overly simple <CODE>
*	getPropertyValue</CODE> and <CODE>setPropertyValue</CODE> methods of
*	<I>RepositoryItem</I> (<I>MutableRepositoryItem</I>) that do not enforce
*	strict type safety during compile.
*
*	<BR><BR>
*
*	The entity beans are generated by inspecting already created Repository Item
*	Descriptions, as opposed to using database meta data.
*
*	@author David Small
*	@version 1.0.0.0
*	@date 7/29/2002
*
***************************************************************************************/

public class SQLRepositoryItemEntityBean extends SQLRepositoryItemBase
{
	/******************************************************************************
	*
	*	Constants
	*
	*****************************************************************************/

	/******************************************************************************
	*
	*	Static members
	*
	*****************************************************************************/

	/** Helper method - helps build the class name of the entity bean based
	    on the name of the repository item.
		@param repositoryItemName Name of the repository item.
	*/
	public static String getClassName(String repositoryItemName)
	{
		return repositoryItemName + "Bean";
	}

	/******************************************************************************
	*
	*	Constructors
	*
	*****************************************************************************/

	/** Constructor - constructs an empty object. */
	public SQLRepositoryItemEntityBean() { super(); }

	/** Constructor - constructs a populated object.
		@param pWriter The output stream.
		@param strAuthor Name of the author.
		@param pDocuemnt XML DOM document that contains the parsed
			Repository Item Descriptor.
	*/
	public SQLRepositoryItemEntityBean(PrintWriter pWriter,
		String strAuthor, Document pDocument)
			throws DynamoMetaException
	{
		super(pWriter, strAuthor, pDocument);
	}

	/** Constructor - constructs a populated object.
		@param pWriter The output stream.
		@param strAuthor Name of the author.
		@param pTable A table record object to base the output on.
		@param pDocuemnt XML DOM document that contains the parsed
			Repository Item Descriptor.
	*/
	public SQLRepositoryItemEntityBean(PrintWriter pWriter,
		String strAuthor, Document pDocument, String strPackageName)
			throws DynamoMetaException
	{
		super(pWriter, strAuthor, pDocument, strPackageName);
	}

	/******************************************************************************
	*
	*	Required methods: Base
	*
	*****************************************************************************/

	/** Action method - generates the SQL Repository Item Descriptor. */
	public void generate() throws GeneratorException, IOException
	{
		// pre populates commonly used item descriptor property information.
		populatePropertyInfo();

		// Output the wrapper class.
		writeHeader();
		writeClassDeclaration();

		writeStaticMembers();

		writeEjbMethods();
		writeFinderMethods();

		writeHelperMethods();

		writeAccessors();
		writeMutators();
		writeEntityContextMethods();

		writeMemberVariables();

		writeFooter();
	}

	/******************************************************************************
	*
	*	Helper methods
	*
	*****************************************************************************/

	/** Helper method - populates commonly used item descriptor property
	    information into member variables.
	*/
	private void populatePropertyInfo()
		throws GeneratorException
	{
		ItemDescriptor itemDescriptor = getDefaultItemDescriptor();
		Collection properties = itemDescriptor.getProperties();
		Iterator itProperties = properties.iterator();
		Table table = itemDescriptor.getPrimaryTable();
		Set idColumns = table.getIdColumnsSet();

		m_nProperties = properties.size();

		m_propObjectNames = new String[m_nProperties];
		m_propColumnNames = new String[m_nProperties];
		m_propMethodSuffixes = new String[m_nProperties];
		m_propJdbcMethodSuffixes = new String[m_nProperties];
		m_propJavaTypes = new String[m_nProperties];
		m_propJavaObjectTypes = new String[m_nProperties];
		m_propIsPrimitives = new boolean[m_nProperties];
		m_propMemberVariables = new String[m_nProperties];
		m_propLocalVariables = new String[m_nProperties];
		m_propIdColumns = new int[idColumns.size()];
		m_strTableName = table.getName();

		int i = 0;
		int idColumnCurrent = 0;

		while (itProperties.hasNext())
		{
			Property property = (Property) itProperties.next();

			m_propObjectNames[i] = property.getName();
			m_propColumnNames[i] = property.getColumnName();
			m_propMethodSuffixes[i] = getPropertyMethodSuffix(property);
			m_propJdbcMethodSuffixes[i] = getJdbcMethodSuffix(property);
			m_propJavaTypes[i] = getJavaType(property);
			m_propJavaObjectTypes[i] = getJavaObjectType(property);
			m_propIsPrimitives[i] = isPrimitive(m_propJavaTypes[i]);
			m_propMemberVariables[i] = getMemberVariableName(property);
			m_propLocalVariables[i] = getLocalVariableName(property);

			if (idColumns.contains(m_propColumnNames[i]))
				m_propIdColumns[idColumnCurrent++] = i;

			i++;
		}
	}

	/******************************************************************************
	*
	*	Output methods
	*
	*****************************************************************************/

	/** Output method - writes the file header. */
	private void writeHeader() throws IOException
	{
		String strPackageName = getPackageName();

		if (null != strPackageName)
		{
			writeLine("package " + strPackageName + ";");
			writeLine();
		}

		// Must include "java.util.*" becuase of Date, Set, List, and Map.

		writeLine("import java.sql.*;");
		writeLine("import java.util.*;");
		writeLine();
		writeLine("import javax.ejb.*;");
		writeLine("import javax.naming.*;");
		writeLine("import javax.sql.DataSource;");
		writeLine();
		writeLine("import atg.repository.*;");
		writeLine("import atg.repository.rql.*;");
		writeLine();
		writeLine("import com.small.library.atg.repository.*;");
		writeLine();
		writeLine("/**********************************************************************************");
		writeLine("*");
		writeLine("*\tBMP class that represents the " + getName() + " repository item. Extracts ");
		writeLine("*\tvalues from the repository item during <CODE>ejbLoad</CODE> and resets");
		writeLine("*\tthe repository item values during a request to <CODE>ejbStore</CODE>.");
		writeLine("*");
		writeLine("*\t@author " + getAuthor());
		writeLine("*\t@version 1.0.0.0");
		writeLine("*\t@date " + getDateString());
		writeLine("*");
		writeLine("**********************************************************************************/");
	}

	/** Output method - writes the class declaration. */
	private void writeClassDeclaration() throws IOException
	{
		writeLine();
		writeLine("public class " + getClassName() + " implements EntityBean");
		writeLine("{");
	}

	/** Output method - writes the static members. */
	private void writeStaticMembers() throws IOException
	{
		writeLine("\t/**************************************************************************");
		writeLine("\t*");
		writeLine("\t*\tStatic members");
		writeLine("\t*");
		writeLine("\t**************************************************************************/");
		writeLine();
		writeLine("\t/** Static member - reference to the <I>MutableRepositoryHandler</I> used");
		writeLine("\t    by all instances.");
		writeLine("\t*/");
		writeLine("\tprivate static final MutableRepositoryHandler repositoryHandler = new");
		writeLine("\t\tMutableRepositoryHandler();");
	}

	/** Output method - writes the EJB methods. */
	private void writeEjbMethods() throws IOException
	{
		writeLine();
		writeLine("\t/**************************************************************************");
		writeLine("\t*");
		writeLine("\t*\tEJB methods");
		writeLine("\t*");
		writeLine("\t**************************************************************************/");

		writeEjbCreate();
		writeEjbPostCreate();
		writeEjbLoad();
		writeEjbStore();
		writeEjbRemove();
		writeEjbActivate();
		writeEjbPassivate();
	}

	/** Output method - writes the <CODE>ejbCreate</CODE> method. */
	private void writeEjbCreate() throws IOException
	{
		String strPrimaryKeyClassName = EntityBeanPrimaryKey.getClassName(getName());
		String strPrimaryKeyFields = "";

		// Build the primary key fields.
		for (int i = 0; i < m_propIdColumns.length; i++)
		{
			if (0 < i)
				strPrimaryKeyFields+= ", ";

			strPrimaryKeyFields+= m_propMemberVariables[m_propIdColumns[i]];
		}


		// Write create method with all possible values.
		writeLine();
		writeLine("\t/** EJB method - creates a populated object.");

		for (int i = 0; i < m_nProperties; i++)
			writeLine("\t\t@param " + m_propLocalVariables[i] +
				" represents the \"" + m_propColumnNames[i] +
				"\" field.");

		writeLine("\t*/");
		writeLine("\tpublic " + EntityBeanPrimaryKey.getClassName(getName()) + " ejbCreate(");

		for (int i = 0; i < m_nProperties - 1; i++)
			writeLine("\t\t" + m_propJavaTypes[i] + " " +
				m_propLocalVariables[i] + ",");

		writeLine("\t\t" + m_propJavaTypes[m_nProperties - 1] + " " +
			m_propLocalVariables[m_nProperties - 1] + ")");

		writeLine("\t{");

		for (int i = 0; i < m_nProperties; i++)
			writeLine("\t\t" + m_propMemberVariables[i] + " = " +
				m_propLocalVariables[i] + ";");

		writeLine();
		writeLine("\t\ttry");
		writeLine("\t\t{");
		writeLine("\t\t\tMutableRepository repository = (MutableRepository) getRepository();");
		writeLine("\t\t\tMutableRepositoryItem repositoryItem =");
		writeLine("\t\t\t\trepository.createItem(repository.getDefaultViewName());");
		writeLine();
		writeLine("\t\t\tsynchRepositoryItem(repositoryItem);");
		writeLine("\t\t\trepository.addItem(repositoryItem);");
		writeLine();
		writeLine("\t\t\treturn new " + strPrimaryKeyClassName + "(" +
			strPrimaryKeyFields + ");");
		writeLine("\t\t}");
		writeLine();
		writeLine("\t\tcatch (RepositoryException pEx) { throw new EJBException(pEx); }");
		writeLine("\t}");			
	}

	/** Output method - writes the <CODE>ejbPostCreate</CODE> method. */
	private void writeEjbPostCreate() throws IOException
	{
		// Write post create method with all possible values.
		writeLine();
		writeLine("\t/** EJB method - handle post creation of the bean.");

		for (int i = 0; i < m_nProperties; i++)
			writeLine("\t\t@param " + m_propLocalVariables[i] +
				" represents the \"" + m_propColumnNames[i] +
				"\" field.");

		writeLine("\t*/");
		writeLine("\tpublic void ejbPostCreate(");

		for (int i = 0; i < m_nProperties - 1; i++)
			writeLine("\t\t" + m_propJavaTypes[i] + " " +
				m_propLocalVariables[i] + ",");

		writeLine("\t\t" + m_propJavaTypes[m_nProperties - 1] + " " +
			m_propLocalVariables[m_nProperties - 1] + ")");

		writeLine("\t{}");
	}

	/** Output method - writes the <CODE>ejbLoad</CODE> method. */
	private void writeEjbLoad() throws IOException
	{
		String strPrimaryKeyClassName = EntityBeanPrimaryKey.getClassName(getName());

		writeLine();
		writeLine("\t/** EJB method - extract property values from the repository item to");
		writeLine("\t    populate this instance of the data bean.");
		writeLine("\t*/");
		writeLine("\tpublic void ejbLoad() throws EJBException");
		writeLine("\t{");
		writeLine("\t\t" + strPrimaryKeyClassName + " primaryKey = (" +
			strPrimaryKeyClassName + ") entityContext.getPrimaryKey();");
		writeLine("\t\tRepositoryItem repositoryItem = getRepositoryItem(primaryKey);");
		writeLine();

		writeLine("\t\ttry");
		writeLine("\t\t{");

		for (int i = 0; i < m_nProperties; i++)
		{
			writeLine("\t\t\t" + m_propMemberVariables[i] + " = " +
				"repositoryHandler.getProperty" + m_propMethodSuffixes[i] +
				"(repositoryItem, \"" + m_propObjectNames[i] + "\");");
		}

		writeLine("\t\t}");
		writeLine();
		writeLine("\t\tcatch (RepositoryPropertyConversionException pEx)");
		writeLine("\t\t{ throw new EJBException(pEx); }");
		writeLine("\t}");
	}

	/** Output method - writes the <CODE>ejbStore</CODE> method. */
	private void writeEjbStore() throws IOException
	{
		writeLine();
		writeLine("\t/** EJB method - resets property values of the repository item from");
		writeLine("\t    the members of this instance of the entity bean.");
		writeLine("\t*/");
		writeLine("\tpublic void ejbStore() throws EJBException");
		writeLine("\t{");
		writeLine("\t\tMutableRepository repository = (MutableRepository) getRepository();");
		writeLine("\t\tMutableRepositoryItem repositoryItem =");
		writeLine("\t\t\t(MutableRepositoryItem) getRepositoryItem(repository);");
		writeLine();
		writeLine("\t\tsynchRepositoryItem(repositoryItem);");
		writeLine();
		writeLine("\t\ttry { repository.updateItem(repositoryItem); }");
		writeLine("\t\tcatch (RepositoryException pEx) { throw new EJBException(pEx); }");
		writeLine("\t}");
	}

	/** Output method - writes the <CODE>ejbRemove</CODE> method. */
	private void writeEjbRemove() throws IOException
	{
		writeLine();
		writeLine("\t/** EJB method - resets property values of the repository item from");
		writeLine("\t    the members of this instance of the data bean.");
		writeLine("\t*/");
		writeLine("\tpublic void ejbRemove() throws EJBException");
		writeLine("\t{");
		writeLine("\t\tMutableRepository repository = (MutableRepository) getRepository();");
		writeLine("\t\tRepositoryItem repositoryItem =");
		writeLine("\t\t\tgetRepositoryItem(repository);");
		writeLine();
		writeLine("\t\ttry");
		writeLine("\t\t{");
		writeLine("\t\t\trepository.removeItem(repositoryItem.getRepositoryId(),");
		writeLine("\t\t\t\trepositoryItem.getItemDescriptor().getItemDescriptorName());");
		writeLine("\t\t}");
		writeLine();
		writeLine("\t\tcatch (RepositoryException pEx) { throw new EJBException(pEx); }");
		writeLine("\t}");
	}

	/** Output method - writes the <CODE>ejbActivate</CODE> method. */
	private void writeEjbActivate() throws IOException
	{
		writeLine();
		writeLine("\t/** EJB Method - handles bean activation. */");
		writeLine("\tpublic void ejbActivate() {}");
	}

	/** Output method - writes the <CODE>ejbPassivate</CODE> method. */
	private void writeEjbPassivate() throws IOException
	{
		writeLine();
		writeLine("\t/** EJB Method - handles bean passivation. */");
		writeLine("\tpublic void ejbPassivate() {}");
	}

	/** Output method - writes the finder methods. */
	private void writeFinderMethods() throws IOException
	{
		writeLine();
		writeLine("\t/**************************************************************************");
		writeLine("\t*");
		writeLine("\t*\tFinder methods");
		writeLine("\t*");
		writeLine("\t**************************************************************************/");

		writeFindByPrimaryKey();
		writeFindAll();
	}

	/** Output method - writes the <CODE>ejbFindByPrimaryKey</CODE> method. */
	private void writeFindByPrimaryKey() throws IOException
	{
		// Does this table have a primary key?
		if (0 == m_propIdColumns.length)
			return;

		String strName = getName();
		String strPrimaryKeyClassName = EntityBeanPrimaryKey.getClassName(strName);

		// Build the SQL Call.
		String strSQL = "SELECT " + m_propColumnNames[m_propIdColumns[0]] +
			" FROM " + m_strTableName +
			" WHERE " + m_propColumnNames[m_propIdColumns[0]] + " = ?";

		for (int i = 1; i < m_propIdColumns.length; i++)
			strSQL+= " AND " + m_propColumnNames[m_propIdColumns[i]] + " = ?";

		// Write the finder method.
		writeLine();
		writeLine("\t/**Finder method - find \"" + strName + "\" entity by primary key.");
		writeLine("\t\t@param primaryKey Primary key object.");
		writeLine("\t*/");
		writeLine("\tpublic " + strPrimaryKeyClassName + " ejbFindByPrimaryKey(" +
			strPrimaryKeyClassName + " primaryKey)");
		writeLine("\t\tthrows FinderException, EJBException");
		writeLine("\t{");
		writeLine("\t\tConnection connection = null;");
		writeLine("\t\tResultSet resultSet = null;");
		writeLine("\t\tPreparedStatement stmt = null;");
		writeLine();
		writeLine("\t\ttry");
		writeLine("\t\t{");
		writeLine("\t\t\tconnection = getConnection();");
		writeLine("\t\t\tstmt = connection.prepareStatement(\"" + strSQL + "\");");
		writeLine();

		for (int i = 0; i < m_propIdColumns.length; i++)
		{
			int idColumn = m_propIdColumns[i];
			writeLine("\t\t\tstmt.set" + m_propJdbcMethodSuffixes[idColumn] +
				"(" + (i + 1) + ", primaryKey." +
				m_propMemberVariables[idColumn] + ");");
		}

		writeLine();
		writeLine("\t\t\tresultSet = stmt.executeQuery();");
		writeLine("\t\t\tif (!resultSet.next())");
		writeLine("\t\t\t\tthrow new ObjectNotFoundException(\"Cannot find \\\"" +
			strName + "\\\" with primary key - \" + primaryKey.toString() + \".\");");
		writeLine();
		writeLine("\t\t\treturn primaryKey;");
		writeLine("\t\t}");
		writeLine();
		writeLine("\t\tcatch (SQLException pEx) { throw new EJBException(pEx); }");
		writeLine("\t\tfinally");
		writeLine("\t\t{");
		writeLine("\t\t\ttry");
		writeLine("\t\t\t{");
		writeLine("\t\t\t\tif (null != stmt) stmt.close();");
		writeLine("\t\t\t\tif (null != resultSet) resultSet.close();");
		writeLine("\t\t\t\tif (null != connection) connection.close();");
		writeLine("\t\t\t}");
		writeLine("\t\t\tcatch (SQLException pEx) { throw new EJBException(pEx); }");
		writeLine("\t\t}");
		writeLine("\t}");
	}

	/** Output method - writes the <CODE>ejbFindAll</CODE> method. */
	private void writeFindAll() throws IOException
	{
		// Does this table have a primary key?
		if (0 == m_propIdColumns.length)
			return;

		String strName = getName();
		String strPrimaryKeyClassName = EntityBeanPrimaryKey.getClassName(strName);

		// Build the SQL Call.
		String strSQL = "SELECT " + m_propColumnNames[m_propIdColumns[0]];

		for (int i = 1; i < m_propIdColumns.length; i++)
			strSQL+= ", " + m_propColumnNames[m_propIdColumns[i]];

		strSQL+= " FROM " + m_strTableName;

		// Write the finder method.
		writeLine();
		writeLine("\t/**Finder method - find all \"" + strName + "\" entities. */");
		writeLine("\tpublic Collection ejbFindAll()");
		writeLine("\t\tthrows FinderException, EJBException");
		writeLine("\t{");
		writeLine("\t\tConnection connection = null;");
		writeLine("\t\tResultSet resultSet = null;");
		writeLine();
		writeLine("\t\ttry");
		writeLine("\t\t{");
		writeLine("\t\t\tconnection = getConnection();");
		writeLine("\t\t\tresultSet = connection.createStatement().executeQuery(\"" + strSQL + "\");");
		writeLine("\t\t\tArrayList primaryKeys = new ArrayList();");
		writeLine();
		writeLine("\t\t\twhile (resultSet.next())");
		writeLine("\t\t\t{");
		writeLine("\t\t\t\t" + strPrimaryKeyClassName + " primaryKey = new " +
			strPrimaryKeyClassName + "();");
		writeLine();

		for (int i = 0; i < m_propIdColumns.length; i++)
		{
			int idColumn = m_propIdColumns[i];
			writeLine("\t\t\t\tprimaryKey." + m_propMemberVariables[idColumn] +
				" = resultSet.get" + m_propJdbcMethodSuffixes[idColumn] +
				"(" + (i + 1) + ");");
		}

		writeLine();
		writeLine("\t\t\t\tprimaryKeys.add(primaryKey);");
		writeLine("\t\t\t}");
		writeLine();
		writeLine("\t\t\treturn primaryKeys;");
		writeLine("\t\t}");
		writeLine();
		writeLine("\t\tcatch (SQLException pEx) { throw new EJBException(pEx); }");
		writeLine("\t\tfinally");
		writeLine("\t\t{");
		writeLine("\t\t\ttry");
		writeLine("\t\t\t{");
		writeLine("\t\t\t\tif (null != resultSet) resultSet.close();");
		writeLine("\t\t\t\tif (null != connection) connection.close();");
		writeLine("\t\t\t}");
		writeLine("\t\t\tcatch (SQLException pEx) { throw new EJBException(pEx); }");
		writeLine("\t\t}");
		writeLine("\t}");
	}

	/** Output method - writes the helper methods. */
	private void writeHelperMethods() throws IOException
	{
		writeLine();
		writeLine("\t/**************************************************************************");
		writeLine("\t*");
		writeLine("\t*\tHelper methods");
		writeLine("\t*");
		writeLine("\t**************************************************************************/");

		writeGetRepository();
		writeGetRepositoryItem();
		writeRepositoryHelperMethods();
		writeSynchRepositoryItem();
		writeGetConnection();
	}

	/** Output method - writes the helper method that gets the Repository that
	    underlies this entity bean.
	*/
	private void writeGetRepository() throws IOException
	{
		// Write "getRepository"
		writeLine();
		writeLine("\t/** Helper method - gets the Repository object that underlies this");
		writeLine("\t     entity bean.");
		writeLine("\t*/");
		writeLine("\tprivate Repository getRepository() throws EJBException");
		writeLine("\t{");
		writeLine("\t\ttry");
		writeLine("\t\t{");
		writeLine("\t\t\tContext context = new InitialContext();");
		writeLine();
		writeLine("\t\t\t// Get the repository name from the environment entry.");
		writeLine("\t\t\tString strRepositoryName = (String) context.lookup(\"java:comp/env/RepositoryName\");");
		writeLine();
		writeLine("\t\t\t// Is it valid?");
		writeLine("\t\t\tif (null == strRepositoryName)");
		writeLine("\t\t\t\tthrow new EJBException(\"Could not find Repository Name for the \\\"" + getName() + "\\\" entity bean.\");");
		writeLine();
		writeLine("\t\t\treturn (Repository) context.lookup(strRepositoryName);");
		writeLine("\t\t}");
		writeLine();
		writeLine("\t\tcatch (NamingException pEx) { throw new EJBException(pEx); }");
		writeLine("\t}");

		// Write "getDefaultRepositoryView" without a supplied Repository object.
		writeLine();
		writeLine("\t/** Helper method - gets the default Repository View object. */");
		writeLine("\tprivate RepositoryView getDefaultRepositoryView()");
		writeLine("\t\tthrows EJBException");
		writeLine("\t{");
		writeLine("\t\treturn getDefaultRepositoryView(getRepository());");
		writeLine("\t}");

		// Write "getDefaultRepositoryView" with a supplied Repository object.
		writeLine();
		writeLine("\t/** Helper method - gets the default Repository View object.");
		writeLine("\t\t@param repository Repository object that contains the Repository View.");
		writeLine("\t*/");
		writeLine("\tprivate RepositoryView getDefaultRepositoryView(Repository repository)");
		writeLine("\t\tthrows EJBException");
		writeLine("\t{");
		writeLine("\t\ttry");
		writeLine("\t\t{");
		writeLine("\t\t\treturn repository.getView(repository.getDefaultViewName());");
		writeLine("\t\t}");
		writeLine();
		writeLine("\t\tcatch (RepositoryException pEx) { throw new EJBException(pEx); }");
		writeLine("\t}");
	}

	/** Output method - writes the helper method that gets a repository item from
	    a repository by primary key.
	*/
	private void writeGetRepositoryItem() throws IOException
	{
		String strPrimaryKeyClassName = EntityBeanPrimaryKey.getClassName(getName());

		// Get by primary key object.
		writeLine();
		writeLine("\t/** Helper method - gets a Repository Item from the underlying Repository");
		writeLine("\t    by primary key.");
		writeLine("\t\t@param primaryKey The primary key.");
		writeLine("\t*/");
		writeLine("\tprivate RepositoryItem getRepositoryItem(" + strPrimaryKeyClassName +
			" primaryKey)");
		writeLine("\t\tthrows EJBException");
		writeLine("\t{");
		writeLine("\t\t return getRepositoryItem(getRepository(), primaryKey);");
		writeLine("\t}");

		writeLine();
		writeLine("\t/** Helper method - gets a Repository Item from the underlying Repository");
		writeLine("\t    by primary key.");
		writeLine("\t\t@param repository The repository object.");
		writeLine("\t\t@param primaryKey The primary key.");
		writeLine("\t*/");
		writeLine("\tprivate RepositoryItem getRepositoryItem(Repository repository,");
		writeLine("\t\t" + strPrimaryKeyClassName + " primaryKey)");
		writeLine("\t\t\tthrows EJBException");
		writeLine("\t{");
		writeLine("\t\ttry");
		writeLine("\t\t{");
		writeLine("\t\t\tRepositoryItem[] items = getRqlStatementForPrimaryKey().executeQuery(");
		writeLine("\t\t\t\tgetDefaultRepositoryView(repository),");
		writeLine("\t\t\t\tgetPrimaryKeyParameters(primaryKey));");
		writeLine();
		writeLine("\t\t\tif ((null == items) || (0 == items.length))");
		writeLine("\t\t\t\tthrow new EJBException(\"Entity, \\\"" + getName() + "\\\", could not find " +
			"primary key - \" + primaryKey.toString() + \".\");");
		writeLine();
		writeLine("\t\t\treturn items[0];");
		writeLine("\t\t}");
		writeLine();
		writeLine("\t\tcatch (RepositoryException pEx) { throw new EJBException(pEx); }");
		writeLine("\t}");

		// Get by primary key fields of the entity bean.
		writeLine();
		writeLine("\t/** Helper method - gets a Repository Item from the underlying Repository");
		writeLine("\t    by primary key fields of this instance.");
		writeLine("\t*/");
		writeLine("\tprivate RepositoryItem getRepositoryItem()");
		writeLine("\t\tthrows EJBException");
		writeLine("\t{");
		writeLine("\t\t return getRepositoryItem(getRepository());");
		writeLine("\t}");

		writeLine();
		writeLine("\t/** Helper method - gets a Repository Item from the underlying Repository");
		writeLine("\t    by primary key fields of this instance.");
		writeLine("\t\t@param repository The repository object.");
		writeLine("\t*/");
		writeLine("\tprivate RepositoryItem getRepositoryItem(Repository repository)");
		writeLine("\t\t\tthrows EJBException");
		writeLine("\t{");
		writeLine("\t\ttry");
		writeLine("\t\t{");
		writeLine("\t\t\tRepositoryItem[] items = getRqlStatementForPrimaryKey().executeQuery(");
		writeLine("\t\t\t\tgetDefaultRepositoryView(repository),");
		writeLine("\t\t\t\tgetPrimaryKeyParameters());");
		writeLine();
		writeLine("\t\t\tif ((null == items) || (0 == items.length))");
		writeLine("\t\t\t\tthrow new EJBException(\"Entity, \\\"" + getName() + "\\\", could not find " +
			"primary key - \" + toString() + \".\");");
		writeLine();
		writeLine("\t\t\treturn items[0];");
		writeLine("\t\t}");
		writeLine();
		writeLine("\t\tcatch (RepositoryException pEx) { throw new EJBException(pEx); }");
		writeLine("\t}");
	}

	/** Output method - writes the helper methods used to interact with SQL Repositories. */
	private void writeRepositoryHelperMethods() throws IOException
	{
		// Get the class name of the primary key class.
		String strPrimaryKeyClassName = EntityBeanPrimaryKey.getClassName(getName());

		// Build the RQL string for querying by primary key.
		String strQuery = "";

		for (int i = 0; i < m_propIdColumns.length; i++)
		{
			if (0 < i)
				strQuery+= " AND ";

			int nProperty = m_propIdColumns[i];
			strQuery+= m_propObjectNames[nProperty] + " = ?" + i;
		}

		// Write "getRqlStatementForPrimaryKey".
		writeLine();
		writeLine("\t/** Helper method - gets an RQL Statement object based on the ID");
		writeLine("\t    columns.");
		writeLine("\t*/");
		writeLine("\tprivate RqlStatement getRqlStatementForPrimaryKey()");
		writeLine("\t\tthrows EJBException");
		writeLine("\t{");
		writeLine("\t\ttry");
		writeLine("\t\t{");
		writeLine("\t\t\treturn RqlStatement.parseRqlStatement(\"" + strQuery + "\");");
		writeLine("\t\t}");
		writeLine();
		writeLine("\t\tcatch (RepositoryException pEx) { throw new EJBException(pEx); }");
		writeLine("\t}");

		// Write "getPrimaryKeyParameters" by use of a primary key object.
		writeLine();
		writeLine("\t/** Helper method - gets an array of objects that represents the");
		writeLine("\t    the primary key values of the primary key object.");
		writeLine("\t\t@param primaryKey Primary key object.");
		writeLine("\t*/");
		writeLine("\tpublic Object[] getPrimaryKeyParameters(" + strPrimaryKeyClassName +
			" primaryKey)");
		writeLine("\t{");
		writeLine("\t\tObject[] parameters = new Object[" + m_propIdColumns.length + "];");
		writeLine();

		for (int i = 0; i < m_propIdColumns.length; i++)
		{
			int idColumn = m_propIdColumns[i];

			if (m_propIsPrimitives[idColumn])
				writeLine("\t\tparameters[" + i + "] = new " +
					m_propJavaObjectTypes[idColumn] + "(primaryKey." +
					m_propMemberVariables[idColumn] + ");");
			else
				writeLine("\t\tparameters[" + i + "] = " +
					"primaryKey." +
					m_propMemberVariables[idColumn] + ";");
		}

		writeLine();
		writeLine("\t\treturn parameters;");
		writeLine("\t}");

		// Write "getPrimaryKeyParameters" by use of the primary key members of the current instance.
		writeLine();
		writeLine("\t/** Helper method - gets an array of objects that represents the");
		writeLine("\t    the primary key values of the current instance.");
		writeLine("\t*/");
		writeLine("\tpublic Object[] getPrimaryKeyParameters()");
		writeLine("\t{");
		writeLine("\t\tObject[] parameters = new Object[" + m_propIdColumns.length + "];");
		writeLine();

		for (int i = 0; i < m_propIdColumns.length; i++)
		{
			int idColumn = m_propIdColumns[i];

			if (m_propIsPrimitives[idColumn])
				writeLine("\t\tparameters[" + i + "] = new " +
					m_propJavaObjectTypes[idColumn] + "(" +
					m_propMemberVariables[idColumn] + ");");
			else
				writeLine("\t\tparameters[" + i + "] = " +
					m_propMemberVariables[idColumn] + ";");
		}

		writeLine();
		writeLine("\t\treturn parameters;");
		writeLine("\t}");
	}

	/** Output method - writes the synchRepositoryItem method. */
	private void writeSynchRepositoryItem() throws IOException
	{
		writeLine();
		writeLine("\t/** Helper method - Synchronizes the properties of the Repository Item");
		writeLine("\t    with the member variables of this instance.");
		writeLine("\t\t@param repositoryItem Mutable Repository Item object to synchronize.");
		writeLine("\t*/");
		writeLine("\tprivate void synchRepositoryItem(MutableRepositoryItem repositoryItem)");
		writeLine("\t\tthrows EJBException");
		writeLine("\t{");

		for (int i = 0; i < m_nProperties; i++)
		{
			writeLine("\t\trepositoryHandler.setPropertyValue(" +
				"repositoryItem, \"" + m_propObjectNames[i] + "\", " +
				m_propMemberVariables[i] + ");");
		}

		writeLine("\t}");
	}

	/** Output method - writes the getConnection method. */
	private void writeGetConnection() throws IOException
	{
		writeLine();
		writeLine("\t/** Helper method - gets a JDBC connection to the underlying");
		writeLine("\t    data source.");
		writeLine("\t*/");
		writeLine("\tprivate Connection getConnection()");
		writeLine("\t\tthrows EJBException");
		writeLine("\t{");
		writeLine("\t\ttry");
		writeLine("\t\t{");
		writeLine("\t\t\tContext context = new InitialContext();");
		writeLine("\t\t\tDataSource dataSource = (DataSource)");
		writeLine("\t\t\t\tcontext.lookup(\"java:comp/env/jdbc/mainDataSource\");");
		writeLine();
		writeLine("\t\t\treturn dataSource.getConnection();");
		writeLine("\t\t}");
		writeLine();
		writeLine("\t\tcatch (NamingException pEx) { throw new EJBException(pEx); }");
		writeLine("\t\tcatch (SQLException pEx) { throw new EJBException(pEx); }");
		writeLine("\t}");
	}

	/** Output method - writes the bean accessors. */
	private void writeAccessors() throws IOException
	{
		writeLine();
		writeLine("\t/**************************************************************************");
		writeLine("\t*");
		writeLine("\t*\tAccessor methods");
		writeLine("\t*");
		writeLine("\t**************************************************************************/");

		for (int i = 0; i < m_nProperties; i++)
		{
			writeLine();
			writeLine("\t/** Accessor method - gets the \"" + m_propObjectNames[i] + "\" property value. */");
			writeLine("\tpublic " + m_propJavaTypes[i] + " get" + m_propObjectNames[i] +
				"() { return " + m_propMemberVariables[i] + "; }");
		}
	}

	/** Output method - writes the bean mutators. */
	private void writeMutators() throws IOException
	{
		writeLine();
		writeLine("\t/**************************************************************************");
		writeLine("\t*");
		writeLine("\t*\tMutator methods");
		writeLine("\t*");
		writeLine("\t**************************************************************************/");

		for (int i = 0; i < m_nProperties; i++)
		{
			writeLine();
			writeLine("\t/** Mutator method - sets the \"" + m_propObjectNames[i] + "\" property value. */");
			writeLine("\tpublic void set" + m_propObjectNames[i] + "(" +
				m_propJavaTypes[i] + " newValue)");
			writeLine("\t{");
			writeLine("\t\t" + m_propMemberVariables[i] +
				" = newValue;");
			writeLine("\t}");
		}
	}

	/** Output method - writes the Entity Context methods. */
	private void writeEntityContextMethods() throws IOException
	{
		// Start section.
		writeLine();
		writeLine("\t/**************************************************************************");
		writeLine("\t*");
		writeLine("\t*\tEntity Context methods");
		writeLine("\t*");
		writeLine("\t**************************************************************************/");

		writeLine();

		// Write accessor.
		writeLine("\t/** Accessor method - gets the <I>EntityContext</I> object. */");
		writeLine("\tpublic EntityContext getEntityContext() { return entityContext; }");

		// Write mutator
		writeLine();
		writeLine("\t/** Mutator method - sets the <I>EntityContext</I> object. */");
		writeLine("\tpublic void setEntityContext(EntityContext newValue) { entityContext = newValue; }");
		writeLine();
		writeLine("\t/** Mutator method - unsets the <I>EntityContext</I> object. */");
		writeLine("\tpublic void unsetEntityContext() { entityContext = null; }");
	}

	/** Output method - writes the member variable section. */
	private void writeMemberVariables() throws IOException
	{
		writeLine();
		writeLine("\t/**************************************************************************");
		writeLine("\t*");
		writeLine("\t*\tMember variables");
		writeLine("\t*");
		writeLine("\t**************************************************************************/");

		for (int i = 0; i < m_nProperties; i++)
		{
			writeLine();
			writeLine("\t/** Member variable - contains the \"" +
				m_propObjectNames[i] + "\" property value. */");
			writeLine("\tpublic " + m_propJavaTypes[i] + " " +
				m_propMemberVariables[i] + ";");
		}

		// Write the Entity Context member variable.
		writeLine();
		writeLine("\t/** Member variable - represents the <I>EntityContext</I> object. */");
		writeLine("\tprivate EntityContext entityContext;");
	}

	/** Output method - writes the class footer. */
	private void writeFooter() throws IOException
	{
		writeLine("}");
	}

	/*****************************************************************************
	*
	*	Helper method
	*
	*****************************************************************************/

	/** Helper method - gets a member variable name based on a SQL Repository Item
	    property name.
		@param property A SQL Repository Item property object.
	*/
	public String getMemberVariableName(Property property)
	{
		String strObjectName = property.getName();

		char[] chars = strObjectName.toCharArray();
		chars[0] = Character.toLowerCase(chars[0]);

		return new String(chars);
	}

	/** Helper method - gets a local variable name based on a SQL Repository Item
	    property name.
		@param property A SQL Repository Item property object.
	*/
	public String getLocalVariableName(Property property)
	{
		return getVariablePrefix(property) + property.getName();
	}

	/******************************************************************************
	*
	*	Accessor methods
	*
	*****************************************************************************/

	/** Accessor method - gets the object name of the data bean class.
	*/
	public String getClassName() { return m_strClassName; }

	/******************************************************************************
	*
	*	Mutator methods
	*
	*****************************************************************************/

	/** Mutator method - sets the XML DOM document that contains the parsed
	    Repository Item Descriptor.
	*/
	public void setDocument(Document document)
		throws DynamoMetaException, NullPointerException
	{
		super.setDocument(document);

		m_strClassName = getClassName(getName());
	}

	/******************************************************************************
	*
	*	Member variables
	*
	*****************************************************************************/

	/** Member variable - reference to the object name of the data bean class. */
	private String m_strClassName = null;

	/** Member variable - contains the number of properties in the current
	    item descriptor.
	*/
	private int m_nProperties = 0;

	/** Member variable - array of object names for each property. */
	private String[] m_propObjectNames = null;

	/** Member variable - array of column names for each property. */
	private String[] m_propColumnNames = null;

	/** Member variable - array of method suffixes for each property. */
	private String[] m_propMethodSuffixes = null;

	/** Member variable - array of JDBC method suffixes for each property. */
	private String[] m_propJdbcMethodSuffixes = null;

	/** Member variable - array of java types for each property. */
	private String[] m_propJavaTypes = null;

	/** Member variable - array of java object types for each property. */
	private String[] m_propJavaObjectTypes = null;

	/** Member variable - array of primitive indicators for each property. */
	private boolean[] m_propIsPrimitives = null;

	/** Member variable - array of member variable names for each property. */
	private String[] m_propMemberVariables = null;

	/** Member variable - array of local variable names for each property. */
	private String[] m_propLocalVariables = null;

	/** Member variable - array of integers that index the property values of
	    the ID columns.
	*/
	private int[] m_propIdColumns = null;

	/** Member variable - contains the default table name. */
	private String m_strTableName = null;

	/******************************************************************************
	*
	*	Class entry point
	*
	*****************************************************************************/

	/** Command line entry point.
		@param strArg1 Output directory.
		@param strArg2 Input directory of the Repository Item Descriptors.
		@param strArg3 author of the generated classes. Will use the
			"user.name" system property value if not supplied.
		@param strArg4 package name of the data bean class.
	*/
	public static void main(String strArgs[])
	{
		try
		{
			// Have enough arguments been supplied?
			if (2 > strArgs.length)
				throw new IllegalArgumentException("Please supply at least 2 arguments.");

			// Local variables
			File fileOutputDir = extractOutputDirectory(strArgs, 0);
			File fileInputDir = extractDirectory(strArgs, 1, "input");
			String strAuthor = extractAuthor(strArgs, 2);
			String strPackageName = extractArgument(strArgs, 3, null);

			// Get the list of files.
			FileFilter fileFilter = new com.small.library.util.FileFilterByExtension("xml");
			File[] fileItemDescriptors =
				fileInputDir.listFiles(fileFilter);

			// Create the SQL Repository Item Descriptor generator.
			SQLRepositoryItemEntityBean generator =
				new SQLRepositoryItemEntityBean((PrintWriter) null, strAuthor,
				null, strPackageName);

			// Generate repository resource.
			generateRepositoryResource(generator, fileItemDescriptors, fileOutputDir);
		}

		catch (IllegalArgumentException pEx)
		{
			String strMessage = pEx.getMessage();

			if (null != strMessage)
			{
				System.out.println(strMessage);
				System.out.println();
			}

			System.out.println("Usage: java " + SQLRepositoryItemEntityBean.class.getName() + " Output directory");
			System.out.println("\tInput directory of the Repository Item Descriptors");
			System.out.println("\t[Author]");
			System.out.println("\t[Package Name]");
		}

		catch (GeneratorException pEx) { pEx.toException().printStackTrace(); }

		catch (Exception pEx)
		{
			pEx.printStackTrace();
		}
	}
}
